<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Ceci n'est pas un blog</title><link href="https://cecinestpasun.com/entries/" rel="alternate"></link><link href="https://cecinestpasun.com/rss/all/" rel="self"></link><id>urn:uuid:3b1f1082-69de-3657-a54e-eb0c8d82054c</id><updated>2019-05-03T10:00:00Z</updated><author><name></name></author><entry><title>Where do you see Python in 10 years?</title><link href="https://cecinestpasun.com/entries/where-do-you-see-python-in-10-years/" rel="alternate"></link><updated>2019-05-03T10:00:00Z</updated><author><name></name></author><id>urn:uuid:ccdeae3f-0787-3034-8032-f0122c69a331</id><content type="html">&lt;p&gt;At &lt;a class="reference external" href="https://us.pycon.org/2019"&gt;PyCon US 2019&lt;/a&gt;,  I was extremely honored to give the opening keynote. While the PyCon Video team worked their usual magic to publish the video really quickly, some people prefer to consume text rather than video, so this is the transcript of my remarks.&lt;/p&gt;
&lt;iframe width="500" height="281" src="https://www.youtube.com/embed/ftP5BQh1-YM?start=1238" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;p&gt;I've been an active and visible participant in the Python community for over 13 years now. And as a result, I've spoken at a lot of PyCons and DjangoCons. But for those who haven't met me before: Hi, you may have noticed I'm not a local.&lt;/p&gt;
&lt;p&gt;I was born, and I live to this day, on little dot down the bottom of the map: &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Perth"&gt;Perth, Western Australia&lt;/a&gt;. Perth is not usually one of the cities people think of when they think of Australia. Its kinda like Cleveland - a fine city, but not usually the first one that jumps to mind when you think of the US.&lt;/p&gt;
&lt;p&gt;Perth has a fascinating history, and has had a bigger impact on the world than many realize - and some of those stories are convenient metaphors - so today I would like teach you all about Perth, and maybe we can learn some valuable lessons about life along the way.&lt;/p&gt;
&lt;p&gt;First off - some terminology. We are in Ohio. Someone from Ohio is called a Buckeye. Someone from Western Australia - is called - and I swear I'm not making this up...&lt;/p&gt;
&lt;p&gt;...a sandgroper.&lt;/p&gt;
&lt;p&gt;We're so named after &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sandgroper_(insect)"&gt;this delightful fellow&lt;/a&gt; - Cylindraustralia kochii. It's a pygmy mole cricket. About 2 inches long, lives in the sand dunes at the beach.&lt;/p&gt;
&lt;p&gt;And they're not venomous!&lt;/p&gt;
&lt;div class="section" id="acknowledgement-of-country"&gt;
&lt;h2&gt;Acknowledgement of Country&lt;/h2&gt;
&lt;p&gt;Sandgropers - the people, not the insects - have a tradition about how you start big public events like a PyCon. Australia, like the US, Canada, and many other colonized countries, has a messy history with their indigeneous peoples. In recognition of that fact, starting in Perth in the 1970s, Australian public gatherings have, increasingly, started with a recognition that the land where the gathering is happening wasn't always white man's land.&lt;/p&gt;
&lt;p&gt;It's called &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Welcome_to_Country"&gt;Acknowledgement of Country&lt;/a&gt; - and in that spirit, I'd like to acknowledge that I come from &lt;a class="reference external" href="https://www.noongarculture.org.au/whadjuk/"&gt;Whadjuk Noongar Boodja&lt;/a&gt;; and I'd like to recognize the Eriehonan and Haudenosaunee peoples, the traditional owners of the land where we meet today, to recognize their continuing connection to their land, waters and culture, and to pay my respects to their Elders past, present and emerging.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="content-warning"&gt;
&lt;h2&gt;Content Warning&lt;/h2&gt;
&lt;p&gt;Also - as a content warning, later in this talk, I will be discussing issues of depression and self harm. If that's something that will impact you, please do whatever you need for self care. I'll give another warning before we get to that part of the talk.&lt;/p&gt;
&lt;p&gt;So - to the subject at hand. We've established that, yes, I do come from a land down under... but who am I?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="who-am-i"&gt;
&lt;h2&gt;Who am I?&lt;/h2&gt;
&lt;p&gt;Well, in my day job, I do data engineering for &lt;a class="reference external" href="https://survata.com"&gt;Survata&lt;/a&gt;. Survata is a market research company. They use Python and data science to help brands to understand their customers.&lt;/p&gt;
&lt;p&gt;Survata gives me the flexibility to flit around the planet to meet all you wonderful people - but as lovely as it is to have the support of a wonderful company like Survata, that's not really why I'm here today.&lt;/p&gt;
&lt;p&gt;I became involved in and I'm known to the Python community through my work on Django. I joined the Django core team way back in 2006. Because I lived in Perth, I didn't meet another member of the Django core team until 2008.&lt;/p&gt;
&lt;p&gt;Django is a big part of the broader Python ecosystem; but it's not the only part. Django isn't the only Python web framework; and web programming isn't the only thing people do with Python.&lt;/p&gt;
&lt;p&gt;In my current day job at Survata, I don't use Django at all. But I do make extensive use of NumPy, Jupyter, Pandas, and the ecosystem of tools around those libraries.&lt;/p&gt;
&lt;p&gt;And there many other uses of Python. You can use Python on embedded devices. There are libraries for performing astronomical calculations, biotech and gene sequencing. It's used as a scripting language for operating system automation, as a control language for devops, and as a teaching language.&lt;/p&gt;
&lt;p&gt;None of this has happened overnight. Python as a language is 28 years old. It took maybe 10 years for Python to gain significant traction in our industry, and another 10 before it gained really widespread support.&lt;/p&gt;
&lt;p&gt;And, as a result, we get.... this. A gathering of three and half thousand people who have organized to travel from all over the planet - even Perth - to converge in, of all places, Cleveland, to talk about a programming language for a couple of days.&lt;/p&gt;
&lt;p&gt;It's worth stopping for a moment to reflect on the magnitude of what Guido set in motion 28 years ago, and what we, collectively, have done since. It should be celebrated, because it's no small feat.&lt;/p&gt;
&lt;p&gt;And because this is the big tent of the Python community, we have a real opportunity to look to the future as well. This weekend, and into the sprints next week, we have the opportunity to dream big ideas, work out what problems we need to solve, and where we're going to collectively focus our efforts over the coming weeks, months and years.&lt;/p&gt;
&lt;p&gt;So, to kickstart that conversation, I'd like to pose a question to everyone in this room.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-question"&gt;
&lt;h2&gt;A question&lt;/h2&gt;
&lt;p&gt;Where do you see Python in 10 years?&lt;/p&gt;
&lt;p&gt;The one thing I'm certain of is that everyone in this room will have a different answer to this question - that's inevitable when a language is used by so many people for so many different things. But if you're here in this room today, I think it's probably fair to assume that you like Python to some degree. And in 10 years, you'd like Python to be at least as vibrant a community as it is today.&lt;/p&gt;
&lt;p&gt;I'm sure nobody wants to have to rewrite all of the libraries on PyPI, or rebuild all the communities and user groups in the Python ecosystem, or re-establish all our ecosystem norms in a new community, just because Python is no longer a viable language for new projects.&lt;/p&gt;
&lt;p&gt;So - this question - Where do you see Python in 10 years - is really about asking what we need to do today to ensure that Python &lt;em&gt;remains&lt;/em&gt; a relevant, vibrant, and healthy community.&lt;/p&gt;
&lt;p&gt;Time for some more sandgroper facts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="black-swans"&gt;
&lt;h2&gt;Black Swans&lt;/h2&gt;
&lt;p&gt;The state bird of Western Australia is the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Black_swan"&gt;Black Swan&lt;/a&gt;. It appears on the Western Australian Flag, and on the crest of the City of Perth. The river running through the middle of Perth is the Swan river.&lt;/p&gt;
&lt;p&gt;But a black swan is also a metaphor.&lt;/p&gt;
&lt;p&gt;Prior to the 1600s, it was well known that all swans are white. Swans of other colors were known to not exist. And then in 1697, Dutch explorer Willem de Vlamingh visited Western Australia - and discovered that swans could also be black. This radically changed the worlds idea of what a swan was.&lt;/p&gt;
&lt;p&gt;In 2001, essayist and statstician &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Nassim_Nicholas_Taleb"&gt;Nassim Nicholas Taleb&lt;/a&gt; used this as a broader metaphor.&lt;/p&gt;
&lt;p&gt;Taleb defined a Black Swan event as an event that is a surprise to the observer, that has a major effect on the world, but in hindsight, can be easily explained. In hindsight, it was obvious that swans could be be black. But until someone visited Western Australia, it never occurred to anyone to challenge that assumptions.&lt;/p&gt;
&lt;p&gt;Black swan events don't have to be immediate, either - the impact can be felt over time. The rise of the personal computer was a black swan event. In 1947, CEO of IBM Thomas Watson famously said there was a world market for maybe five computers. Today, almost everyone in this room is carrying five computers. In retrospect, Watson's comments are just quaintly naive. But at the time, they weren't controversial - they were the common understanding of the world. And the change wasn't immediate, but in retrosoect, it was inevitable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-s-black-swan"&gt;
&lt;h2&gt;Python's Black Swan&lt;/h2&gt;
&lt;p&gt;In my opinion, when we're thinking about what the future holds for Python, we need to be thinking about Python’s black swans.&lt;/p&gt;
&lt;p&gt;Python is a popular language right now. We'd like it to stay popular. What could happen to affect that popularity?
What change could happen in the industry, in hardware, or in the community, that could alter the popularity of Python? That would cause Python to become that annoying legacy language that we have to know, but would rather replace at the earliest opportunity?&lt;/p&gt;
&lt;p&gt;Black swan events are only truly obvious in hindsight - but the best way to avoid them is to actively challenge your assumptions. And question what would happen if those assumptions turned out to be incorrect.&lt;/p&gt;
&lt;p&gt;And I think there's a couple we have cause to be concerned about.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="black-swan-1-everyone-uses-a-laptop"&gt;
&lt;h2&gt;Black Swan 1: Everyone uses a laptop&lt;/h2&gt;
&lt;p&gt;First - where do you run Python?&lt;/p&gt;
&lt;p&gt;For pretty much the entire existence of Python, a &amp;quot;computer&amp;quot; was a large box that sat on your desk, or maybe in a rack in a server room. Over time, the box got smaller, and you started carrying it around in your backpack, but you used the same operating system - Windows, or a Unix derivative.&lt;/p&gt;
&lt;p&gt;Over the last 10 years, we've seen the emergence of a new class of computing devices - much smaller, and usually portable. Phones, tablets, watches, and set top boxes.&lt;/p&gt;
&lt;p&gt;These devices are becoming ubiquitous - and they're replacing laptops as primary computing devices. My son started high school last year. He doesn't have a laptop for school. His entire educational experience is delivered through a tablet device.&lt;/p&gt;
&lt;p&gt;If you go to python.org, tablets, phones and set top boxes don't even rate a mention. To me, that seems like a pretty big oversight of the way the everyday experience of computing has changed over the last 10 years. Phones and tablets are acheiving market penetration that desktop and laptops have &lt;em&gt;never&lt;/em&gt; seen. And yet, as a community, we don't have a story for how you can use Python on these devices.&lt;/p&gt;
&lt;p&gt;So what happens to Python when laptops don't exist, or become niche devices? If I'm a novice programmer, and there's no installer for Python &lt;em&gt;on&lt;/em&gt; my tablet, and I can't use Python to write an app for my tablet... why am I going to learn Python?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="black-swan-2-python-can-stay-on-the-server"&gt;
&lt;h2&gt;Black Swan 2: Python can stay on the server&lt;/h2&gt;
&lt;p&gt;Not all Python runs on laptops, though - some of it runs on the server. And you can use Python to write a web application.&lt;/p&gt;
&lt;p&gt;10 years ago, when Django was the cool new thing, you installed Python on the server, and you used it to render HTML and CSS to the browser. If you were &lt;em&gt;really&lt;/em&gt; hip, you'd sprinkle some AJAX in as well, adding autocomplete to your search box - but you made sure that if the user didn't have Javascript enabled, the page would gracefully degrade and would still work.&lt;/p&gt;
&lt;p&gt;These days - good luck finding a web page that works without Javascript enabled. As with mobile devices, the last 10 years has seen a dramatic shift in where code is being executed, and increasingly, code is being run &lt;em&gt;in&lt;/em&gt; the browser. Javascript evolved from an optional client-side add on, to a language implementing key logic &lt;em&gt;in&lt;/em&gt; the browser, to a language that replacing Python on the server.&lt;/p&gt;
&lt;p&gt;Again - if I'm a novice programmer, and I'm faced with Javascript - a language I can use to get a native experience in the browser, and can transition that onto the server... and on the other hand there's Python, a language that only works on the server - why am I going to learn Python?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="black-swan-3-installation-is-a-solved-problem"&gt;
&lt;h2&gt;Black Swan 3: Installation is a solved problem&lt;/h2&gt;
&lt;p&gt;Ok, so lets say that despite those two problems, I have decided to learn Python. And I reach the point where I need to install a package.&lt;/p&gt;
&lt;p&gt;I've been a user of Python for 20 years, and in that entire time, I don't think there's ever been a period where I'd describe Python's packaging story as &amp;quot;stable&amp;quot;. And because information lives forever on the Internet, old advice continues to linger, long after it's considered the &amp;quot;right&amp;quot; answer, and then well meaning but misinformed people spread outdated advice on stack overflow, perpetuating the problem.&lt;/p&gt;
&lt;p&gt;![Image goes here](images/xkcd-1987.png)&lt;/p&gt;
&lt;p&gt;The situation is bad enough that it's a punch line for comics. In &lt;a class="reference external" href="https://xkcd.com/1987/"&gt;XKCD 1987&lt;/a&gt;, Randall Monroe lampoons Python's environment experience as so degraded that it has made laptop a toxic waste site.&lt;/p&gt;
&lt;p&gt;Brett Cannon did a &lt;a class="reference external" href="https://snarky.ca/deconstructing-xkcd-com-1987/"&gt;really good writeup about this comic&lt;/a&gt;, trying to diagnose what has happened on Randall's computer. It's a really enlightening autopsy, well worth the read.&lt;/p&gt;
&lt;p&gt;One thing that Brett points out - and it's the part that's most concerning for me, from the perspective of looking for Black Swans, is this:&lt;/p&gt;
&lt;p&gt;Why can this joke be made at all?&lt;/p&gt;
&lt;p&gt;Good jokes always contain an element of truth. And the way you respond to that truth matters. This joke is part of a narrative about what Python &lt;em&gt;is&lt;/em&gt;. And if that picture isn't positive, then long term - that's an existential threat. If I'm a new user, why would I want to learn Python if everything I read about it ends up with a joke about my computer becoming a toxic waste site?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="black-swan-4-code-distribution-doesn-t-matter"&gt;
&lt;h2&gt;Black Swan 4: Code distribution doesn't matter&lt;/h2&gt;
&lt;p&gt;And I haven't even got to the question of how I distribute my application to someone else. Whether you're distributing a Django application, or distributing a user-space application - Python hasn't ever had a consistent story for how I give my code to someone else - especially if that someone else isn't a developer, and just wants to use my application.&lt;/p&gt;
&lt;p&gt;Contrast that with, for example, PHP, whose distribution story is &amp;quot;use FTP to upload all the files&amp;quot;. Or Go's story, which is &amp;quot;here, have this executable&amp;quot;. I'm not saying that the PHP or Go solutions are a panacea - they're not. And I'm not saying Python's story will be as simple as any of these. But we haven't got a story &lt;em&gt;at all&lt;/em&gt; - and we're competing against languages that do. And again, why would I want to learn Python if I can't get a clear answer for how I can give my code to my non-programmer friends?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="or-is-our-black-swan-something-else"&gt;
&lt;h2&gt;... or is our Black Swan something else?&lt;/h2&gt;
&lt;p&gt;That's 4 possible Black Swans that I've identified. Maybe it's something else? I know there are people in this room who will assert that Python's C API is a potential problem. Or the GIL. Or the lack of a good front-end story. Or focussing on Unix and Mac to the exclusion of Windows. Maybe the problem won't be technical at all - maybe it will be cultural. Some aspect of Python's community or development process that drives some segment of users or potential contributors away because of percieved hostility, or conflict, or diverging interests.&lt;/p&gt;
&lt;p&gt;Or maybe it won't be any one of these things. My point is that we can't predict the future. But we can challenge our assumptions. We can look criticially at ourselves as a community. We can examine the trends in our industry and our society, and make plans based on those assessments; not just reacting to problems when they're already wildfires, but proactively addressing problems before they become critical threats to the ecosystem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="this-is-not-about-blame"&gt;
&lt;h2&gt;This is not about blame&lt;/h2&gt;
&lt;p&gt;I also want to be &lt;em&gt;very&lt;/em&gt; clear here. This isn't an accusation. I'm not blaming anyone of not doing their job. The Python core team is doing the absolute best they can with the resources they have - and they're &lt;em&gt;very&lt;/em&gt; limited resources.&lt;/p&gt;
&lt;p&gt;What I'm talking about here is trying to avoid Black Swans. To start a conversation about longer term priorities, and how we marshal the resources that we, as a community, have at our disposal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="beeware"&gt;
&lt;h2&gt;BeeWare&lt;/h2&gt;
&lt;p&gt;For whatever it's worth, these existential problems are one of the reasons I changed the focus of my open source contributions a few years ago. As I said eariler, I developed my reputation working on Django. But these days, I'm spending most of my volunteer time on the BeeWare project.&lt;/p&gt;
&lt;p&gt;For those that haven't come across it before, &lt;a class="reference external" href="https://beeware.org"&gt;BeeWare&lt;/a&gt; is a collection of open source tools and libraries for creating native user interfaces in Python - for desktop, but also for iOS, Android, single-page webapps, and other new hardware platforms.&lt;/p&gt;
&lt;p&gt;A key part of that work is getting Python to run on phones and tablets &lt;em&gt;at all&lt;/em&gt;, working out how to run Python code on Android, iOS, and in the browser, bridging to native APIs on those platforms, and wrapping those APIs in a cross platform layer.&lt;/p&gt;
&lt;p&gt;Another big part is developing a distribution story - working out how to integrate with native platform tools, and get an application written in Python wrapped as an app, with an installer, or uploaded to the App store or Play store.&lt;/p&gt;
&lt;p&gt;Now, BeeWare is a work in progress. It's current state is &amp;quot;compelling proof of concept&amp;quot;. It's not a version 1 product ready to start using to develop your mission critical application; but I have been able to demonstrate that cross-platform native applications, written in Python is possible.&lt;/p&gt;
&lt;p&gt;I'm also not the only person working on this problem. The &lt;a class="reference external" href="https://kivy.org/"&gt;Kivy&lt;/a&gt; project has similar goals, but with differences in their underlying approach.&lt;/p&gt;
&lt;p&gt;As far BeeWare is concerned; about 18 months ago, I did a live demo at PyCon Australia 2017 where I wrote a Fahrenheit to Celcuis application, in 50 lines of Python code, and deployed it on MacOS, Linux, Windows, iOS, Android, and as a single-page web application, all in the space of 20 minutes.&lt;/p&gt;
&lt;p&gt;And when I say deployed - I don't just mean &amp;quot;I ran the code&amp;quot;. I mean on Mac, it was a standalone .app file. On Windows, it was an MSI installer. On iOS and Android, it was a packaged app, running in the device simulators, but it could have been uploaded to an App store. And it was running in a browser, completely client side, including doing the Fahrenheit to Celcius conversion in Python, in the browser.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sisyphus"&gt;
&lt;h2&gt;Sisyphus&lt;/h2&gt;
&lt;p&gt;Now - as you might imagine, this is a big project. I've been working on BeeWare for years, and there are days when I feel like Sisyphus, eternally pushing a boulder up the hill.&lt;/p&gt;
&lt;p&gt;Unfortunately, there hasn't been a lot of visible progress since I did that demo. There's even been some regressions - Android and web support is currently broken, for example. And that's because it's not my day job. I'm tinkering on this in what I amusingly refer to as my spare time - and as a result, progress is slow.&lt;/p&gt;
&lt;p&gt;Now despite all this - I'm actually optimistic about Python's future.&lt;/p&gt;
&lt;p&gt;To explain why, I need to tell you another piece of Sandgroper history, about a yacht race.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-1983-america-s-cup"&gt;
&lt;h2&gt;The 1983 America's Cup&lt;/h2&gt;
&lt;p&gt;I need to tell you about the America's Cup.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/America%27s_Cup"&gt;The America's Cup&lt;/a&gt; is the world's oldest international sporting trophy. The America's Cup race is held about every 4 years; Those of you from San Francisco may remember the 2013 America's Cup, raced in San Francisco Bay.&lt;/p&gt;
&lt;p&gt;But from the first race in 1851 to 1980, the winner was the the New York Yacht club.&lt;/p&gt;
&lt;p&gt;In &lt;a class="reference external" href="https://en.wikipedia.org/wiki/1983_America%27s_Cup"&gt;1983&lt;/a&gt;, New York lost to the Royal Perth Yacht Club, and it's yacht &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Australia_II"&gt;Australia II&lt;/a&gt;, breaking a 132 year winning streak.&lt;/p&gt;
&lt;p&gt;Now, it's difficult for me to understate how big a deal this was in Australia, and in Perth specifically. This was event that put Perth on the world stage for pretty much the first time.&lt;/p&gt;
&lt;p&gt;Many of you here today probably even know about the 1983 America's Cup without even knowing why. Some of you may have heard me drop the line that &amp;quot;I come from a land down under&amp;quot; earlier on. That's a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Down_Under_(song)"&gt;line from a song by Australian rock band &amp;quot;Men at Work&amp;quot;&lt;/a&gt; - that song was the unofficial theme song for Australia II. And it was popular in the US primarily because of the 1983 America's cup. The movie Crocodile Dundee was concieved of and able to get financed and released, in part, because of the exposure Australia received from the America's Cup.&lt;/p&gt;
&lt;p&gt;Just to be clear, though - Outback steakhouse? You can't blame us for that. We had nothing to do with it.&lt;/p&gt;
&lt;p&gt;Ok, but other than the Perth connection - why does the America's Cup and Australia II matter?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-1-a-fair-game"&gt;
&lt;h2&gt;Lesson 1: A fair game&lt;/h2&gt;
&lt;p&gt;First off - lets talk about the New York Yacht Club's winning streak. The yachts in the 1983 race were what are called 12 meter yachts. Despite the name, it's got nothing to do with the size of the boat - it describes a set of rules for the design of boats, involving sail area, waterline length, and more.&lt;/p&gt;
&lt;p&gt;However, the America's Cup hasn't always been raced by 12 meter yachts. Prior to 1956, a range of yacht classes were used. According to the deed for the trophy, the defending club must accept regular challenges; but they're allowed to set the rules for those challenges.&lt;/p&gt;
&lt;p&gt;And so, for many years, the New York Yacht Club would impose rules like &amp;quot;the challenger must come from an ocean yacht club, and must sail to the competition site on it's own hull&amp;quot;. That is - a challenger from England would have to cross the Atlantic in their yacht... whereas the defender would pop out from Newport harbour. And surprise surprise - under those conditions, New York's yachts were lighter and faster.&lt;/p&gt;
&lt;p&gt;So, lesson 1 from the America's Cup - it's not enough to just follow the rules; you have to ensure the competition is fair.&lt;/p&gt;
&lt;p&gt;The New York Yacht Club wasn't breaking any rules. They didn't write the deed for the trophy. They were just playing the hand they were dealt. But nobody in their right mind would call the resulting competition fair.&lt;/p&gt;
&lt;p&gt;In a situation like this, you have a choice. You can either keep winning in a competition that has been stacked in your favour, or you can change what &lt;em&gt;is&lt;/em&gt; in your control, and make it a fair competition. But you don't get to claim you're the best in the world, winning on merit, unless you've leveled the playing field.&lt;/p&gt;
&lt;p&gt;Could this be an metaphor for the IT industry... you know? I think it might be. I'll just leave that thought over here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-2-watch-out-for-black-swans"&gt;
&lt;h2&gt;Lesson 2: Watch out for Black Swans&lt;/h2&gt;
&lt;p&gt;But to their credit, the New York Yacht Club adopted the 12 meter rule in 1958, so since then, the competition had been fair - so why hadn't anyone else won? And why did Australia II win?&lt;/p&gt;
&lt;p&gt;Well, a Black swan happened. Sailing is highly competitive, and the New York Yacht Club always fielded a strong defence, with well designed yachts, and highly capable crews. When you add in the home-harbour advantage - knowing the seas and prevailing winds of Newport harbour - it's easier to continue winning.&lt;/p&gt;
&lt;p&gt;And the design of 12 meter yachts was essentially finnessing a well established design. Sure, there were variations between boats, but they were relatively well understood tweaks of a basic design.&lt;/p&gt;
&lt;p&gt;But Australia II was a Black Swan.&lt;/p&gt;
&lt;p&gt;When Australia II arrived in the US, the lower half of the boat was shrouded in secrecy. This invited all sorts of wild theories - especially when it started winning races. On two separate occasions, the Australian team caught SCUBA divers trying to take a peek. There were all sorts of accusations that whatever was under the shroud must be illegal.&lt;/p&gt;
&lt;p&gt;But, the team kept the secret right up until the victory celebration, when the team owner stood on the dock, and called for the boat to be raised into the air for all to see - revealing the winged keel. On most boats, the keel is simple flat surface, used to lower the centre of mass of the hull, counterbalancing sail forces.&lt;/p&gt;
&lt;p&gt;Ben Lexen, the designer of Australia II, thought about it differently. He reason that the keel is a hydrodynamic surface - so lets treat it as one. And he added a pair of wings on the bottom of the keel. Those wings perform a similar role to the winglets on an airliner's wings - winglets on a plane's cause the wing to generate more lift, and less drag. And the same is true on a keel - the winglets make the keel more effective at keeping the boat upright, which means the sail is more effective, and the boat is faster.&lt;/p&gt;
&lt;p&gt;The blue paint was camouflage so that if you did get a photo of the keel, you'd see the outline of a traditional keel shape.&lt;/p&gt;
&lt;p&gt;Fast forward to the 1987 Americas cup. &lt;em&gt;Every&lt;/em&gt; yacht had something secret. There were fiberglass hulls. There were all sorts of keel shapes. There were dynamic keels. And the innovation has continued to this day; carbon fibre hulls, solid sails, and more.&lt;/p&gt;
&lt;p&gt;The America's cup isn't sailed on 12 meter yacht's any more - The next America's cup in 2021, will be sailed on what are called AC75 yachts which are quite literally, flying boats. They're so light, and generate so much thrust from their sails, that they're able to use their keel as a hydrofoil and lift out of the water. These boats travel at &lt;em&gt;amazing&lt;/em&gt; speeds.&lt;/p&gt;
&lt;p&gt;All of this innovation has happened because one team decided to challenge the assumptions of 12 meter yacht design. It was controversial. It was risky. But it worked. And yacht racing hasn't been the same since.&lt;/p&gt;
&lt;p&gt;And - just to nail the metaphor home - the name of Australia II's tender boat was the Black Swan.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="computing-s-winged-keel"&gt;
&lt;h2&gt;Computing's winged keel&lt;/h2&gt;
&lt;p&gt;What does this have to do with Python? Well, I think we've already seen a winged keel in our industry: &lt;a class="reference external" href="https://webassembly.org/"&gt;WASM&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For those who haven't heard about it, WASM is &amp;quot;Web Assembly&amp;quot;. It started life as a research project trying to identify the set of primitive Javascript operations that will execute fast in modern javascript engines. That set of primitives is very close to the capabilities of an assembly language - Allocating memory, Simple integer and floating point operations, and so on. And as a result, you can use that set of primitives and compile C to this &amp;quot;assembly language&amp;quot; target.&lt;/p&gt;
&lt;p&gt;WASM is the extension of that work, defining a binary format for transmitting &amp;quot;assembly&amp;quot; content, rather than transmitting Javascript that has to be parsed and interpreted. That makes WASM code smaller and faster to process... but no less portable than Javascript, because at the end of the day, it's still Javascript.&lt;/p&gt;
&lt;p&gt;Essentially it's separating Javascript into two parts - a fast, sandboxed runtime that is almost universally available because it's in the browser; and a language that targets that runtime. For the purposes of our industry, it means that the rules have changed. You no longer have to adopt Javascript the language to adopt Javascript the runtime.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-on-wasm"&gt;
&lt;h2&gt;Python on WASM&lt;/h2&gt;
&lt;p&gt;That means there's an opening for Python - and other languages, for that matter - to be languages available for client side logic in the browser.&lt;/p&gt;
&lt;p&gt;WASM is still in the relatively early days. There are still some issues being worked out - one of the big ones being the interaction between the DOM and WASM. And making a viable WASM-based Python will require some work.&lt;/p&gt;
&lt;p&gt;But the winged keel has been revealed. What we do with that knowledge is up to us. Are we going to dig into the technology, get creative with the rules, determine how we can exploit the rules to our advantage, and sail off in our flying boat? Or are we going to continue to race flat keeled 12 meter yachts and wonder why we don't win races any more?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-3-the-team-matters"&gt;
&lt;h2&gt;Lesson 3: The team matters&lt;/h2&gt;
&lt;p&gt;But there's more we can learn from Australia II. Ben Lexen was a very talented yacht designer. He did a remarkable thing when he put winglets on Australia II's keel. But he wasn't a competitive sailor.&lt;/p&gt;
&lt;p&gt;John Bertrand was an amazing skipper. But he couldn't design a yacht.&lt;/p&gt;
&lt;p&gt;And there were 14 other people on board the boat, and an entire support team on the tender and back at the harbour ensuring those 15 sailors could be competitive. Sailing is a team sport. You don't just need a top-notch engineer or skipper. You need a wide range of skills, and it's only when all those skills come together that you achieve success.&lt;/p&gt;
&lt;p&gt;And the same is true of software. Although there's a historical narrative about great software development being done by a sole hacker tapping away in their basement, that's never actually the case. What we see today as the Python community is the result of countless thousands of hours of effort from countless people.&lt;/p&gt;
&lt;p&gt;And, being primarily software engineers, the coders often get the most attention. And yes - writing good software takes a lot of effort; and doing it well takes time and skill.&lt;/p&gt;
&lt;p&gt;But that's only considering the code. Any project - especially one the size of Python - is much more than the code.&lt;/p&gt;
&lt;p&gt;Project and Team Management is a skill.&lt;/p&gt;
&lt;p&gt;Graphic design and UI design is a skill.&lt;/p&gt;
&lt;p&gt;Developer relations is a skill.&lt;/p&gt;
&lt;p&gt;Technical writing is a skill.&lt;/p&gt;
&lt;p&gt;Now, these skills could be broadly considered in the remit of a &amp;quot;well rounded&amp;quot; software engineer. But what about things that aren't even remotely software related?&lt;/p&gt;
&lt;p&gt;Who organizes the community events?&lt;/p&gt;
&lt;p&gt;Who provides legal advice?&lt;/p&gt;
&lt;p&gt;Who handles communications and public relations?&lt;/p&gt;
&lt;p&gt;Who builds the relationships with potential donors and manages fund raising?&lt;/p&gt;
&lt;p&gt;Who makes the strategic deals with the Googles, Microsofts, and Amazons of the world to ensure Python is a supported language on product roadmaps?&lt;/p&gt;
&lt;p&gt;It turns out - there are people in the world who can't program, but who have remarkable skills that are very, very useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-4-money-makes-things-happen"&gt;
&lt;h2&gt;Lesson 4: Money makes things happen&lt;/h2&gt;
&lt;p&gt;And Australia II has another lesson here. Ben Lexen and his team didn't do all this engineering design work out of the goodness of their heart. Competitive sailing has been described as the ability to stand in a cold shower tearing up $100 bills. The Australia II challenge was bankrolled by a gentleman named Alan Bond. The 1983 challenge was the third challenge that Bond had financed, collectively absorbing hundreds of millions of dollars.&lt;/p&gt;
&lt;p&gt;Without Bond's money, the Australia II challenge would not have happened. And without a commitment over multiple Cup campaigns allowing the design team to become deeply familiar with 12 meter yacht design, and funding the research effort, it wouldn't have culminated in the winged keel.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="expertise-costs"&gt;
&lt;h2&gt;Expertise costs&lt;/h2&gt;
&lt;p&gt;Whether it's competitive sailing or software, expertise is needed - but experts kinda expect to get paid.&lt;/p&gt;
&lt;p&gt;From inside the bubble of open source software development, it's easy to lose sight of the fact that some of the cultural norms we see... aren't normal in other industries.&lt;/p&gt;
&lt;p&gt;Open source software is an industry where it's apparently expected that having worked your 9-5 day job doing something you're skilled at, you'll go home, and do some more, for free, and then encourage multi-billion dollar organizations to benefit from your effort.&lt;/p&gt;
&lt;p&gt;In most industries, if you're good at something, you get paid to do it. And people outside software have really useful skills -- skills that many open source projects badly need.&lt;/p&gt;
&lt;p&gt;But it's true of writing software, too. People &lt;em&gt;are&lt;/em&gt; paid well to write software. But there's plenty of software that &lt;em&gt;should&lt;/em&gt; be written, but isn't - or isn't written in a timely fashion, because we're waiting for volunteers to do the job.&lt;/p&gt;
&lt;p&gt;Django is a &lt;em&gt;web framework&lt;/em&gt;, and it took the DSF over 3 years to coordinate the most recent redesign of it's website. Why? Because if you need volunteers, you're immediately constraining the amount of time and effort that anyone can put into the job.&lt;/p&gt;
&lt;p&gt;And I don't want to undermine the significant contribution the volunteers have given to Python and the Python community - but I &lt;em&gt;do&lt;/em&gt; want to challenge the idea that volunteering is the &lt;em&gt;only&lt;/em&gt; way that Python or open source can progress.&lt;/p&gt;
&lt;p&gt;If you pay people for their time, they're much more likely be able to maintain their attention on a problem until designs are fully fleshed out, and consequences are considered, and the work gets done.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pypi-moss-grant"&gt;
&lt;h2&gt;PyPI MOSS Grant&lt;/h2&gt;
&lt;p&gt;We saw an amazing demonstration of this in the Python community with the rewrite of PyPI.&lt;/p&gt;
&lt;p&gt;PyPI has been around for 15 years. It &lt;em&gt;badly&lt;/em&gt; needed a rewrite for almost half it's life. Everyone agreed a rewrite was needed. But the work never got finished. Why? Because nobody was being paid to work on it.&lt;/p&gt;
&lt;p&gt;Then Mozilla gave the PSF a grant of $170000. And the work was done in 6 months. Why? Because a couple of people could focus on getting the job done, instead of trying to fit bugfixes in on weekends between their kids football games, or trying to convince their boss that even though improving PyPI wouldn't make any money for the company directly, it was a worthwhile activity.&lt;/p&gt;
&lt;p&gt;PyPI is an unfortunately rare example. What opportunities have we left on the table - or are we at risk of leaving on the table - beacuse we aren't resourcing them? What constraints have we placed on our own growth because nobody was enthusiastic enough to volunteer their time to address some gap, or make the most of some opportunity?&lt;/p&gt;
&lt;p&gt;And who have we excluded from the development process because they had other life commitments, or couldn't justify donating all their spare time to a volunteer effort? Or because they can't take up a short term grant contract because they live in the US and need healthcare coverage?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="research-and-development-matters"&gt;
&lt;h2&gt;Research and Development matters&lt;/h2&gt;
&lt;p&gt;It's not just about maintenance of existing infrastructure, either. History has shown that research and development is how you ensure success in the long term. And groups that &lt;em&gt;don't&lt;/em&gt; do R&amp;amp;D eventually get beaten.&lt;/p&gt;
&lt;p&gt;Australia II's investment in R&amp;amp;D led to the winged keel, and kickstarted a whole generation of progress in yacht design.&lt;/p&gt;
&lt;p&gt;The black swans I identified earlier aren't something that can be addressed with a trivial fix - they're going to need concentrated effort, and probably a bunch of dead ends along the way.&lt;/p&gt;
&lt;p&gt;I've been doing what I can with BeeWare; but I'm really only doing that on weekends. And the same is true of a &lt;em&gt;lot&lt;/em&gt; of Python, and the Python ecosystem. For the most part, the Python we have today has been developed in the spare time of volunteers, or in whatever fragments of time engineers have been able to extract from their employers.&lt;/p&gt;
&lt;p&gt;What if it didn't have to be that way? What if Python had an R&amp;amp;D division - a permanent engineering group that could focus on strategic tasks for the Python ecosystem.&lt;/p&gt;
&lt;p&gt;When Bell Telephones gave a bunch of engineers the resources to engineer strategically, we got Unix. When Xerox funded a team in Palo Alto to engineer strategically, we got Xerox PARC, which gave us graphical user interfaces, and ethernet and laser printers.&lt;/p&gt;
&lt;p&gt;When you give talented people the resources to think big, amazing things can happen.&lt;/p&gt;
&lt;p&gt;The Python community has talented people. We just need to give them the resources to think big thoughts, and do big things, without the need to demonstrate that the work will generate profits in the next quarter, or without the need to spend half their time on one grant writing the proposal for the next grant.&lt;/p&gt;
&lt;p&gt;And it could open the door to giving high profile, paid career opportunities to groups that have been historically underrepresented in open source developent.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-do-we-pay-for-this"&gt;
&lt;h2&gt;How do we pay for this?&lt;/h2&gt;
&lt;p&gt;The underlying problem we have, though, is how to pay for it. Open source is an amazing way to do engineering - but it's &lt;em&gt;not&lt;/em&gt; a business model. We need to work out how to fund our engineering goals of open source without compromising the social goals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="common-pool-resources"&gt;
&lt;h2&gt;Common Pool Resources&lt;/h2&gt;
&lt;p&gt;This problem &lt;em&gt;is&lt;/em&gt; an area of academic economics research. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Elinor_Ostrom"&gt;Elinor Ostrom&lt;/a&gt; won the 2009 Nobel Prize for Economics for &lt;a class="reference external" href="https://www.amazon.com/Governing-Commons-Evolution-Institutions-Collective/dp/1107569788"&gt;her study of Common Pool Resources&lt;/a&gt;, or CPRs. Real-world examples of CPRs are things like forests, or grazing lands. They are situations where anyone could access the resource. The best &lt;em&gt;individual&lt;/em&gt; strategy for using the resource is to take as much you can get. But the best communal strategy is to collaborate. To limit what you take, and to contribute back to maintaining the resource so that, in the long run, the health and productivity of the resource is maximized.&lt;/p&gt;
&lt;p&gt;Ostrom's work looked at examples of Common Pool Resources that are being managed in the real world. Some of them have been collectively operated and maintained for &lt;em&gt;hundreds&lt;/em&gt; of years.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sacred-topics"&gt;
&lt;h2&gt;Sacred topics&lt;/h2&gt;
&lt;p&gt;One of the key findings of Ostrom's work are the conditions required for sustainable CPRs. And one of those conditions is exclusion. In order to sustain a common pool resource, you have to be able to restrict access to the resource to those that are committed to adhering to community principles.&lt;/p&gt;
&lt;p&gt;The problem is that this is in direct opposition to the Free Software guidelines - which state that you &lt;em&gt;can't&lt;/em&gt; restrict the ability of people to redistribute software.&lt;/p&gt;
&lt;p&gt;I don't know how we reconcile these two positions. It may require some very serious consideration of some ideas that have been considered sacred for a long time, or at the very least, to draw a clearer distinction between software and the communities around them. But we can't avoid these discussions. The consequences of this discrepancy has a very deep impact on people in our community.&lt;/p&gt;
&lt;p&gt;To that end - I've got one last piece of Sandgroper history that I'd like to share with you.&lt;/p&gt;
&lt;p&gt;And as a heads up - we're about to get into the sensitive topics I flagged earlier.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c-y-o-connor"&gt;
&lt;h2&gt;C.Y. O'Connor&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/C._Y._O%27Connor"&gt;Charles Yelverton O'Connor&lt;/a&gt; was born in 1843, and became the Engineer-in-chief of the Public Works department of Western Australia in 1891.&lt;/p&gt;
&lt;p&gt;He had a wide range of responsibilities, but there are two major public works that he's remembered for.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fremantle-harbour"&gt;
&lt;h2&gt;Fremantle Harbour&lt;/h2&gt;
&lt;p&gt;The first is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Fremantle_Harbour"&gt;Fremantle Harbour&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Perth is actually a really dumb place for a large city to be. Sure, it's a long way away from &lt;em&gt;everything&lt;/em&gt; - but cities on the ocean need harbours. But Perth doesn't have a natural deep water harbor.&lt;/p&gt;
&lt;p&gt;So they needed to make one. And they did that by dredging the mouth of the Swan River. And this was done, under the direction and supervision of CY O'Connor, in the 1890s.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-goldfields-water-scheme"&gt;
&lt;h2&gt;The Goldfields Water Scheme&lt;/h2&gt;
&lt;p&gt;But that wasn't O'Connor's only major achievement. The other was even bigger - &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Goldfields_Water_Supply_Scheme"&gt;the Goldfields Water Scheme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In the early 1890s, gold was discovered near the towns of Coolgardie and Kalgoorlie. This started Western Australia's gold rush.&lt;/p&gt;
&lt;p&gt;These towns are in the middle of a desert. There are no natural water sources. But people need water - so they would paying 5 shillings a gallon to have water carted by horse from Perth. Adjusted for inflation, thats around US$100 a gallon.&lt;/p&gt;
&lt;p&gt;But there was so much gold, they were willing to pay. The 1890's goldfields gold rush &lt;em&gt;doubled&lt;/em&gt; the population of Western Australia in four years.&lt;/p&gt;
&lt;p&gt;But some people were dying of thirst and disease, so the government wanted to do something.&lt;/p&gt;
&lt;p&gt;CY O'Connor's solution was a pipeline, running 530km - 330 miles - from Mundairing weir in the Perth hills, to Kalgoorlie, with a series of 8 pumping stations along the route to get the water to it's destination, lifting the water 340m in altitude over the pipe's length. It takes 5 days for a drop of water to make it's way from Mundairing to Kalgoorlie. Again - this was built in the 1890s.&lt;/p&gt;
&lt;p&gt;Fremantle Harbor and the Goldfields pipeline were conceived, planned and delivered in the era of horse drawn carts and steam engines.&lt;/p&gt;
&lt;p&gt;These were both &lt;em&gt;mammoth&lt;/em&gt; undertakings. It took considerable financial commitment from the government of the day to make them happen.&lt;/p&gt;
&lt;p&gt;But like all ambitious plans, they weren't universally popular.&lt;/p&gt;
&lt;p&gt;Criticism of these two projects was widespread. People who had alternative plans that had been rejected took to the presses to express their dismay. Two successive editors of Perth's Sunday Times newspaper made it their personal mission to see O'Connor brought to account for the way he was wasting public funds. They took every opportunity to accuse him of corruption, of ineptitude, calling for a Royal Commission into his activity.&lt;/p&gt;
&lt;p&gt;And all this public criticism and pressure took it's toll on O'Connor. One early monring in 1902, he took his own life.&lt;/p&gt;
&lt;p&gt;These two projects - Fremantle Harbour and the Goldfields Pipeline - they were ambitious - but they weren't foolhardy. They were well designed. And they have &lt;em&gt;shaped&lt;/em&gt; Western Australia. They have both been in continuous operation from the day they were commissioned. Kalgoorlie is, to this day, an active gold mine - one of the world's largest. And children are taught CY O'Connors name and story in Primary School because of the importance of the work he did. But the combination of the public narrative surrounding his work, and his own mental health issues led to the worst possible end.&lt;/p&gt;
&lt;p&gt;Unfortunately, this is a story that will sound familiar to anyone who has been around the open source community for any period of time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="burnout"&gt;
&lt;h2&gt;Burnout&lt;/h2&gt;
&lt;p&gt;I have been a part of online communities for 30 years, and a maintainer for almost 15.&lt;/p&gt;
&lt;p&gt;And I'm here to tell you - dealing with people is emotionally &lt;em&gt;exhausting&lt;/em&gt;. The sense of entitlement that some people bring to discussions about a tool they've received at no cost, and without any obligation to give back in any way, is phenomenal. And dealing with the messy parts of community so that everyone else doesn't have to - is just as exhausting.&lt;/p&gt;
&lt;p&gt;And over time - those pressures add up. And when you're doing all that mental and emotional labour as a &lt;em&gt;volunteer&lt;/em&gt;, it makes you question why you bother at all. My personal experience - I was diagnosed as being in the middle of a major depressive episode in early 2015. Now, there were a number of contributing factors, but one of the big ones was the pressures imposed by my volunteer work dealing with the Django community - in particular, dealing with Code of Conduct issues - and one code of conduct issue in particular.&lt;/p&gt;
&lt;p&gt;I burned out on the Django community. And I'm still part of that community because of the many amazing friends I've made - but I don't actively contribute anywhere near as much as I once did.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-hidden-human-cost-of-floss"&gt;
&lt;h2&gt;The (hidden) human cost of FLOSS&lt;/h2&gt;
&lt;p&gt;I can think of dozens of others who have had similar experiences; who have either scaled back their involvement in open source, or dropped out of the community entirely, because of the treatment they've received at the hands of others in our community.&lt;/p&gt;
&lt;p&gt;Fortunately, I never reached the point of contemplating self harm - I was able to find the help I needed before reaching that point. But I know people who have.&lt;/p&gt;
&lt;p&gt;Are we, as a community, comfortable that we're doing this to our peers, our leaders - or to anyone, for that matter?&lt;/p&gt;
&lt;p&gt;Do we want to build our community on the expectation that volunteers will give of themselves until they burn out? Are we OK with the idea of project founders martying themselves so that the wider commmunity can have access to a web framework, or a packaging service, or a numerical processing library?&lt;/p&gt;
&lt;p&gt;Or do we want to find a way to structure our community to make sure that people who are able to do good work have the resources to do what they do well; and access to others who can actively support them in that work, and access to individuals with skills in other areas?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wrapping-up"&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;10 years ago, Python 3 was released. Despite numerous cries that it would kill python, we've come out the other side as a larger, stronger community. The transition to Python 3 required some bold technical decisions, and OK - maybe some mistakes were made - but ultimately, the gambit appears to have worked.&lt;/p&gt;
&lt;p&gt;That success wasn't inevitable. It took planning and effort. And future success isn't inevitable either. What about the next 10 years?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="calls-to-action"&gt;
&lt;h2&gt;Calls to Action&lt;/h2&gt;
&lt;p&gt;What can &lt;em&gt;you&lt;/em&gt; do to help?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="call-to-action-1-start-thinking-about-black-swans"&gt;
&lt;h2&gt;Call to action 1: Start thinking about Black swans&lt;/h2&gt;
&lt;p&gt;Firstly, we need to start thinking about the Black Swans that have the potential to redefine us.&lt;/p&gt;
&lt;p&gt;We can't affort to &lt;em&gt;just&lt;/em&gt; think about the most pressing problems that are obvious right now. Our immediate sources of pain, or potential sources of revenue.&lt;/p&gt;
&lt;p&gt;We need to think about the problems we're &lt;em&gt;going&lt;/em&gt; to have. Because addressing those problems is going to take time, and by the time those black swans &lt;em&gt;become&lt;/em&gt; the pressing problem... it may be too late.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="call-to-action-2-improve-resourcing-of-maintenance-and-r-d-efforts"&gt;
&lt;h2&gt;Call to action 2: Improve resourcing of maintenance and R&amp;amp;D efforts&lt;/h2&gt;
&lt;p&gt;Secondly, we need to improve our resourcing of maintenance and R&amp;amp;D efforts. We need to work out how to harness the not-insignificant amount of money that is available in our industry to do the work that we &lt;em&gt;collectively&lt;/em&gt; need done. And part of that discussion may mean re-thinking aspects of the way our community operates, or re-shaping the nature of the financial relationship we have with users, and especially large organizations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="call-to-action-3-value-contributors-and-their-contributions"&gt;
&lt;h2&gt;Call to action 3: Value contributors and their contributions&lt;/h2&gt;
&lt;p&gt;Third: as a community, we need to re-evaluate the way we value contributors and their contributions.&lt;/p&gt;
&lt;p&gt;And as a simplistic reading - yes, I mean money. Giving them access to the resources they need to continue doing the work they're doing, or to scale up the work from a part-time volunteer effort to a permanent facility.&lt;/p&gt;
&lt;p&gt;But I don't just mean money. We need to value each other as human beings. When you see something online and you've got some hot take you want to post - think about whether it really needs to be said. And if it does need to be said - are you saying it in a constructive, empathetic way? Consider the collective effect of a thousand messages with the same tone being directed at someone who volunteered to do something for you.&lt;/p&gt;
&lt;p&gt;Ok - those are all still very high level calls to action. These are things that require discussion, planning, and ongoing contemplation. The rest of this conference is a great time to start those discussions, but we're not going to see any magical fix by this time next week.&lt;/p&gt;
&lt;p&gt;You want something concrete? Well, here's two more:&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="call-to-action-4-get-out-your-wallets"&gt;
&lt;h2&gt;Call to action 4: Get out your wallets&lt;/h2&gt;
&lt;p&gt;Firstly, Get out your wallets.&lt;/p&gt;
&lt;p&gt;The &lt;a class="reference external" href="python.org/psf/donations/"&gt;Python Software Foundation&lt;/a&gt;, the &lt;a class="reference external" href="djangoproject.com/fundraising/"&gt;Django Software Foundation&lt;/a&gt;, &lt;a class="reference external" href="numfocus.org"&gt;NumFocus&lt;/a&gt;, and many others accept donations. Encourage your employer to support these organizations to a level that reflects their signficance to their business. Give those organizations the financial resources to do maintenance and R&amp;amp;D work on behalf of the community.&lt;/p&gt;
&lt;p&gt;If you'd like to support my own work on the BeeWare project, you can &lt;a class="reference external" href="beeware.org/bee/join/"&gt;join the project as a financial member&lt;/a&gt;. I'm currently able to cover my hosting costs and pay for stickers and challenge coins; If I can get some more financial backing, I could start making a more substantial time commitment to BeeWare. If you've got other ideas for how to fund BeeWare, or you'd like to know more about the project, we have a booth in the main hall; come have a chat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="call-to-action-5-contribute"&gt;
&lt;h2&gt;Call to action 5: Contribute&lt;/h2&gt;
&lt;p&gt;Lastly, if you have the means, or your privilege allows, contribute. Whether that's on your own time, or on your employer's time, consider contributing to open source - no matter your level of experience. This is a collective effort, and every little bit helps. The BeeWare project definitely needs help; but so do dozens of other projects in the Python ecosystem. And if my experience as a sandgroper proves anything - it's that Open Source really does open up the world.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="where-do-you-see-python-in-10-years"&gt;
&lt;h2&gt;Where do you see Python in 10 years?&lt;/h2&gt;
&lt;p&gt;It's taken 28 years for Python to get to where we are today. And it would be a shame to have to develop it all over again, simply because we didn't pay attention to the way the world is changing, and plan for how Python will fit into the future that is evolving around us.&lt;/p&gt;
&lt;p&gt;And, as Python the &lt;em&gt;language&lt;/em&gt; grows and adapts, we need to make sure that our community grows and adapts as well. This awesome language we know and love would be nothing without the community of people behind it - and as that community grows, I want to see it go from strength to strength.&lt;/p&gt;
&lt;p&gt;I hope I've been able to convince you that Python has a vibrant future ahead of it - we just need to plan for that future, and work out how we're going to execute on those plans in a sustainable fashion.&lt;/p&gt;
&lt;p&gt;And, if I still haven't convinced you about Python's future, maybe I've convinced you to come visit Perth. We're a long way away from everything, but I promise we're worth it. Not all the animals will kill you - for example, there's the happiest animal on earth - the Quokka. Only found on a one island, Rottnest, about an hour by boat from Perth.&lt;/p&gt;
&lt;p&gt;I hope to see you there someday.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Autopsy of a slow train wreck</title><link href="https://cecinestpasun.com/entries/autopsy-of-a-slow-train-wreck/" rel="alternate"></link><updated>2017-08-27T12:06:12Z</updated><author><name></name></author><id>urn:uuid:1a829248-525b-3653-bcf1-2a924c6c4aab</id><content type="html">&lt;p&gt;At &lt;a class="reference external" href="https://2017.djangocon.eu"&gt;DjangoCon Europe 2017&lt;/a&gt;, and again at &lt;a class="reference external" href="https://2017.djangocon.us"&gt;DjangoCon US 2017&lt;/a&gt;, I gave a talk entitled &amp;quot;Autopsy of a slow train wreck: The life and death of a Django startup&amp;quot;. After I gave those presentations, a number of people requested that I publish the content in blog form so they could share it with colleagues.&lt;/p&gt;
&lt;iframe width="500" height="281" src="https://www.youtube.com/embed/DnR9PZS5WGE" frameborder="0" allowfullscreen=""&gt;&lt;/iframe&gt;&lt;div class="section" id="transcript"&gt;
&lt;h2&gt;Transcript&lt;/h2&gt;
&lt;p&gt;I've been a frequent (almost constant) fixture at DjangoCon events over the last 10 years. And if you met me at one of those DjangoCons in the last 6 years, or seen me speak, I may have introduced myself as the CTO and co-founder of TradesCloud. TradesCloud was a software as a service company for tradespeople - plumbers, electricians, carpenters and the like.&lt;/p&gt;
&lt;p&gt;TradesCloud was my startup. I say &amp;quot;was&amp;quot;... beacuse in January of this year, my business partner and I closed the doors on TradesCloud, and shut down the service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gold-plated-lamborghinis"&gt;
&lt;h2&gt;Gold-plated Lamborghinis&lt;/h2&gt;
&lt;p&gt;As an industry, we're fond of promoting the glossy side of startups. That a plucky bunch of engineers can take an idea and a personal credit card, build a business empire, and drive off into the sunset in a gold-plated Lamborghini.&lt;/p&gt;
&lt;p&gt;And yes - those unicorns - and gold plated lamborghinis - do exist. There are even a couple of them in the Django community (the unicorns, not the lamborghinis).&lt;/p&gt;
&lt;p&gt;But it's important to remember that those stories &lt;em&gt;are&lt;/em&gt; unicorns. They're not the normal startup experience for most people.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-reality"&gt;
&lt;h2&gt;The reality...&lt;/h2&gt;
&lt;p&gt;In the VC-backed startup world, the general expctation is that if a VC firm invests in 20 companies, only 1 of them will actually succeed spectacularly. 4 will have some sort of exit that at least results in a breakeven financially; but 15 will fail outright, with a significant or complete financial loss.&lt;/p&gt;
&lt;p&gt;Interestingly, this isn't something unique to tech. Tech does it at a much grander scale, especially when VCs are involved - but open any small business advice book - the sort that is targetted at the plumbers and electricians of the world - and they'll warn you that 50% of businesses fail in their first year.&lt;/p&gt;
&lt;p&gt;And yet, despite the fact that failure happens &lt;em&gt;all the time&lt;/em&gt;, we don't talk about it. We don't talk about &lt;em&gt;why&lt;/em&gt; things fail. And as a result, many of the same lessons have to be learned over and over again. Those that experience failure often feel like they're doing it alone, because of the significant social stigma associated with failure.&lt;/p&gt;
&lt;p&gt;So - this is my small attempt to restore the balance. In this talk, I'm going to talk about TradesCloud - &lt;em&gt;my&lt;/em&gt; failed business. TradesCloud was a slow train wreck - we survived for 6 years, almost to the day. And we had plenty of optimism that success was just around the corner... but that never quite happened.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="what-was-tradescloud"&gt;
&lt;h2&gt;What was Tradescloud?&lt;/h2&gt;
&lt;p&gt;But what was TradesCloud? What prompted me to dedicate 6 years of my life to it?&lt;/p&gt;
&lt;p&gt;Well, it started as a problem that thought I could solve. If you find yourself needing a plumber, how do you pick one? Well, 15 years ago, when I first had the idea for what became TradesCloud, the best option was opening the phone book and looking for the brightest, shiniest ad, maybe arranging a bunch of quotes, and pick one basically at random. If you were really lucky, you might be able to use Google - but that's still looking for the shiniest ad. If they turned out to be good... well we won't need a plumber for a while, so that knowledge is useless. And if they turn out to be awful... we can't warn anyone off, either.&lt;/p&gt;
&lt;p&gt;&amp;quot;There has to be a better way&amp;quot;. And, of course, I did nothing about it. I say nothing - I did start tinkering around with a web framework... you may have heard of it... Django. I originally got involved in Django because I wanted to add aggregation functions to the ORM so I could compute average ratings. And in 2008, I mentored a student - Nicholas Lara - to add aggregation as a Summer of Code project. So... success?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="an-idea-is-born"&gt;
&lt;h2&gt;An idea is born...&lt;/h2&gt;
&lt;p&gt;In late 2010, I met up with a former boss for a drink, and he tells me about his brother. His brother owns a pest control company, he has the same problem - but from a different angle - I'm looking for tradespeople in my area that can be reccomended - he is smaller company that wants to compete with the big players with the shinier ads based on quality of service.&lt;/p&gt;
&lt;p&gt;And so, TradesCloud was born. We had an idea. At the time, it wasn't called TradesCloud - it was called CleverPages - because it was going to be a clever Yellow Pages. In my spare time, I started hacking together a proof of concept.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-1-validate-then-build"&gt;
&lt;h2&gt;Mistake 1: Validate, &lt;em&gt;then&lt;/em&gt; build&lt;/h2&gt;
&lt;p&gt;That was our first mistake, and the first mistake &lt;em&gt;most&lt;/em&gt; tech-oriented people make. As much as Django sells itself as a rapid development framework, any non-trivial project still takes time and effort. And I spent a couple of months of spare time hacking together a proof of concept.&lt;/p&gt;
&lt;p&gt;German military strategist Helmuth von Moltke once noted &amp;quot;No battle plan survives contact with the enemy&amp;quot;. Or, in non-military terms, Scottish poet Robert Burns said &amp;quot;The best-laid schemes o’ mice an’ men gang aft a-gley&amp;quot;. And so it is with business ideas. All the time I spent working on that prototype could have been eliminated if I'd actually spoken to a plumber first.&lt;/p&gt;
&lt;p&gt;Just because we had an idea, and I could implement the idea in software, that didn't mean we had a good &lt;em&gt;business&lt;/em&gt; idea. It meant we had a good idea for a hobby project. And the difference is critical. A business is an idea that generates revenue. A hobby project may be fun to work on. It may even be useful for other people. But if you can't sell something, if you can't pay the bills with it - it isn't a business. And conflating the two ideas is a major problem.&lt;/p&gt;
&lt;p&gt;What we &lt;em&gt;should&lt;/em&gt; have done is validate the idea first, and &lt;em&gt;then&lt;/em&gt; build it.&lt;/p&gt;
&lt;p&gt;But, we didn't do that - and when I finally had something to show off, my business partner opened the local newspaper, picked a bunch of local plumbers, and called them in an attempt to sell the idea.&lt;/p&gt;
&lt;p&gt;He called 10 plumbers. 5 of them suggested he place the idea in an anatomically implausible location. 4 of them had their secretary provide the same advice. One plumber did sound interested, and said he wanted to have a chat.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-2-if-you-can-t-sell-it-it-s-not-a-business"&gt;
&lt;h2&gt;Mistake 2: If you can't sell it, it's not a business&lt;/h2&gt;
&lt;p&gt;This was mistake number 2. Or, at the very least, it should have been a warning flag.&lt;/p&gt;
&lt;p&gt;At the end of the day, business is about selling something. Selling a physical product. A subscription. Selling services. But whatever you're doing, you're selling &lt;em&gt;something&lt;/em&gt;. And in order to sell something, you have to have customers. If all your prospective customers hang up when you call... you have a problem. You don't have a sales channel. It doesn't matter if you've got a machine that turns lead into gold - if you can't get that idea in front of the people who are going to &lt;em&gt;buy&lt;/em&gt; your product, you might as well shut up shop right now. The fact that it was very difficult to get plumbers to answer the phone should have been a warning sign that our prospective audience wasn't going to be easy to crack.&lt;/p&gt;
&lt;p&gt;But, we persisted, and had a chat with the one plumber who would talk to us. We did our pitch, and he said &amp;quot;Nope.
Not interested. But if you can make that pile of paper disappear, I'll give you as much money as you want.&amp;quot;&lt;/p&gt;
&lt;p&gt;This was a conversation that set the direction of our company for years to come. Was this a mistake or a success? Well, that's a little hard to judge. There's an extent to which we changed direction because it was the only direction that seemed open to us - which was a bad move. But it &lt;em&gt;was&lt;/em&gt; a very lucrative direction, so... maybe it's a wash.&lt;/p&gt;
&lt;p&gt;What we identified in that conversation was a significant business problem - a business process that was being performed manually, and took &lt;em&gt;three hours a day&lt;/em&gt;, and identified a simple and reliable way that it could be automated. We identified a couple of other processes we could automate, and ways to report on some key performance indicators. We identified a path forward that could use mobile tech to improve communication and process management. By the time we were done, we'd worked out how to immediately free up a full time employee, with potential for more. So as long as we charged &lt;em&gt;less&lt;/em&gt; than the cost of that employee - about $50k a year - the business owner would be ahead.&lt;/p&gt;
&lt;p&gt;Our costs were next to nothing. Our newfound customer told us that these business processes were due to one specific contract that they had - and there were many others on the same contract. So - should have been easy to sell the same software to everyone else on the contract, and... profit! Right? So - lets keep it simple, offer them a 50% saving - and after doing some fancy footwork to reverse engineer a good explanation for why that was what we were charging, and just start making $25k a year per customer, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-3-humans-gonna-human"&gt;
&lt;h2&gt;Mistake 3: Humans gonna human&lt;/h2&gt;
&lt;p&gt;Well, no. That was mistake number 3.&lt;/p&gt;
&lt;p&gt;Mistake 3 is that we &lt;em&gt;didn't&lt;/em&gt; take into account is the human factor. In theory, charging anything &lt;em&gt;less&lt;/em&gt; than $50k per year - rationally - should have been a no-brainer, easy sale. But we were selling to humans. And humans don't &lt;em&gt;ever&lt;/em&gt; behave rationally. There's an almost bottomless body of research about how bad humans are at evaluating economic decisions and consequences.&lt;/p&gt;
&lt;p&gt;And so, when we walked in the door of a prospective customer, we did our pitch, they were almost universally blown away. And then we told them the price, and they starting describing anatomically implausible locations again. Why?&lt;/p&gt;
&lt;div class="section" id="humans-aren-t-rational"&gt;
&lt;h3&gt;Humans aren't rational&lt;/h3&gt;
&lt;p&gt;Firstly, a sale of that size isn't easy. Asking a plumber to spend $100 a month - they know they can afford that. It's probably less than what they spend on coffee in a month. But asking them to spend $2000 a month? That's a lot harder for them to justify. That actually starts to make a dent in their bottom line. So they're going to take some convincing. They're going to want proof that it actually works, that it's actually going to deliver the benefit you promise.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="software-is-hard-to-sell-to-humans"&gt;
&lt;h3&gt;Software is hard to sell to humans&lt;/h3&gt;
&lt;p&gt;Secondly - we were selling software. While &lt;em&gt;we&lt;/em&gt; were completely honorable, and completely truthful, and we were able to deliver everything we promised, and our software made makes birds suddenly appear every time we were near - we weren't the first IT salesperson they've had to deal with. And we - we collectively - are part of an industry that has, for 40 years, systematically over promised and under delivered what software can do for a business. So that is something that needs to be overcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-really-software-is-hard-to-sell-to-humans"&gt;
&lt;h3&gt;No really - Software is hard to sell to humans&lt;/h3&gt;
&lt;p&gt;Thirdly - we were selling software. Who here is currently holding a phone worth a couple of hundred, maybe even a thousand dollars? Now, how many of give more consideration to whether you should buy a 99c app from the app store than you do the decision to buy the thousand dollar phone?&lt;/p&gt;
&lt;p&gt;That's the problem selling software. And multiply it a thousand times when you start dealing with non-tech audiences. We've been conditioned to expect that physical, tangible things are expensive - but software? That should be cheap, or better still free.&lt;/p&gt;
&lt;p&gt;As a side note - this is one of the major problems we face with funding open source projects as well - but that's a subject for a different rant, and a rant that I've had before.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="humans-are-people"&gt;
&lt;h3&gt;Humans are people&lt;/h3&gt;
&lt;p&gt;Lastly - we were dealing with personal relationships. If we walked into a small plumbing business to speak with the manager, there was an odds-on chance that the bookkeeper, or another significant employee in the business, was the wife of the manager. And you start talking about being able to cut an employee... well, you can guess how well &lt;em&gt;that&lt;/em&gt; conversation goes. And even if it wasn't a family member, people don't generally &lt;em&gt;want&lt;/em&gt; to fire people.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-4-beware-favourable-patterns"&gt;
&lt;h2&gt;Mistake 4: Beware favourable patterns&lt;/h2&gt;
&lt;p&gt;Mistake number 4 happened as the result of an unfortunate coincidence. After closing our first sale, we got that customer to give us an introduction to some other possible customers. And he gave us the best possibilities first. So our first two sales were both $2k a month. Our third was a smaller business - only $500 a month - but that gave us the confidence that we had something that we could sell to medium &lt;em&gt;and&lt;/em&gt; small businesses.&lt;/p&gt;
&lt;p&gt;We'd closed three sales in rapid succession. We had $4500 a month in revenue, and the sales were really easy to close. We thought we had found a money printing machine.&lt;/p&gt;
&lt;p&gt;And then we hit a wall. The next few sales calls we made just went nowhere. Never a hard no... but lots of ums and ahs about price, and &amp;quot;we'll have to think about it&amp;quot;'s...&lt;/p&gt;
&lt;p&gt;We confused initial success with a pattern that was going to continue. After three sales in a month, we essentially didn't close a sale for another 8 months. And that's not a good sign.&lt;/p&gt;
&lt;p&gt;Arguably, we got bitten by circumstances there - when you have lots of early success, it's easy to think that success will be ongoing. This is a time where you need to be objective. If you can't consistently close sales, if you can't reliably predict your close rate - you have a problem.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-5-do-the-math"&gt;
&lt;h2&gt;Mistake 5: Do the math&lt;/h2&gt;
&lt;p&gt;Mistake number 5, though, &lt;em&gt;was&lt;/em&gt; completely our fault. We completely failed to do basic math.&lt;/p&gt;
&lt;p&gt;Our value proposition - the business process that we had optimized - existed because of the processes required by one particular contract. Our pricing scheme was simple - we charged $1 per job completed. Our initial customer - they did about 2000 jobs a month, so we charged them $2000 a month. Which is great, because it also happened to hit our 50% savings target that we originally identified.&lt;/p&gt;
&lt;p&gt;What we &lt;em&gt;didn't&lt;/em&gt; do was add up how many jobs there actually were in the system. It turns out that if we managed to close &lt;em&gt;every&lt;/em&gt; company on that contract, we would have only generated $12k a month in revenue. Which sounds like a lot, especially when your costs are so low... but our costs weren't low. We also had two founders who were full time, and needed to be paid. Our burn rate was closer to $22k per month.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-6-pricing-is-what-the-customer-will-pay-not-your-burn-rate"&gt;
&lt;h2&gt;Mistake 6: Pricing is what the customer will pay, not your burn rate&lt;/h2&gt;
&lt;p&gt;And this led to mistake number 6: We didn't have a serious pricing discussion until it was &lt;em&gt;way&lt;/em&gt; too late. Mislead by our initial success, our pricing was really determined by taking our burn rate, and working backwards - not forwards from what the market would bear. My co-founder and I would have regular discussions about pricing - but all of those discussions happened against a background of &amp;quot;how are we going to make payroll this month&amp;quot;. Which is the wrong time to be having that discussion - because two important options: drastically reduce the price, and shut down the company - are effectively off the table.&lt;/p&gt;
&lt;p&gt;So, we had a product that was too expensive to sell, and a market that wasn't big enough. Now the good news is that the paperwork reduction niche we'd found wasn't unique to that one contract - There were many other &lt;em&gt;simliar&lt;/em&gt; contracts with similar paperwork requriements. But we'd found the thousand pound gorilla in the market. Other contracts were smaller, and the paperwork and process requirements were subtlely different.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-7-establish-your-sales-channel"&gt;
&lt;h2&gt;Mistake 7: Establish your sales channel&lt;/h2&gt;
&lt;p&gt;And that wouldn't have been a problem - if we hadn't made mistake number 7 - we never established our sales channel.&lt;/p&gt;
&lt;p&gt;We got our first sale almost by accident. We bumped into a customer who gave us an opportunity. Subsequent sales came by word of mouth. Word of mouth is an incredible sales channel if you can get it. But as a result, we never cracked the most important problem - how do we sell to someone who hasn't heard of us? How do we get in the door? How do we establish trust? And as a result, our sales were essentially constrained by the personal networks of our existing customers. Perth is a small, geographically isolated city. When we'd exhausted personal networks... we hadn't learned the most important thing - how to sell our product to someone who didn't have a personal introduction.&lt;/p&gt;
&lt;p&gt;Joel Spolsky once noted that there's no software product priced between $1000 and $100000. This is because a product that costs less than $1000 can be bought on a credit card. But if software costs more than can be hidden on an expense statement, you need to have salespeople, and that means you have to pay them, and their commissions, and pay for the steak dinners and drinks used to closed the sale. We had a product that was squarely in this dead zone. Too expensive to be a casual purchase, but not expensive enough to support the sales process it needed.&lt;/p&gt;
&lt;p&gt;TradesCloud had a serious problem. Once we closed a sale, we had almost zero churn rate. The only customers we ever lost were because they closed down, or they dropped the contract where we offered an advantage.&lt;/p&gt;
&lt;p&gt;What we didn't have - and what we never really established - was a good way to &lt;em&gt;prove&lt;/em&gt; to new customers that we were, indeed, that good. There wasn't a good way to &amp;quot;trial&amp;quot; TradesCloud. We were managing processes that were at the core of a trades business. Those processes &lt;em&gt;have&lt;/em&gt; to work. And they can't be duplicated or doubled up. So - there was no way to &amp;quot;stick your toe in the water&amp;quot; - you had to jump in, or stay out. And since we had a huge price tag, most people were conservative, and said no. If they got a recommendation from someone they knew, it was a little easier - but if that didn't exist, we had a problem.&lt;/p&gt;
&lt;p&gt;In order to close a sale, people have to believe - really believe - what you're telling them. It has to be obvious, and undeniable that you will give them benefit - or the cost of trying has to be &lt;em&gt;vastly&lt;/em&gt; less than the cost of the software itself. In our case, even if we dropped our price to zero, we didn't have a zero cost, because the cost of institutional process change involved in adopting a new piece of software at the core of business operations is &lt;em&gt;huge&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Our best sales person was completely accidental. He wasn't &lt;em&gt;our&lt;/em&gt; employee - he was an employee who changed employers every 6 months. He was in upper management, had a reputation for getting things done and turning companies around, so he kept getting poached. And he'd seen the benefits of TradesCloud with one contract, and so it was easy to get in the door every where else he went. And because he was known around the industry, his word was extremely valuable. When he said &amp;quot;This is good&amp;quot;, people believed him. His word was trusted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-8-sales-don-t-stop-when-you-sell"&gt;
&lt;h2&gt;Mistake 8: Sales don't stop when you sell&lt;/h2&gt;
&lt;p&gt;But even when we &lt;em&gt;did&lt;/em&gt; make a sale, the mistakes didn't stop. Mistake number 8 - we didn't pay enough attention to onboarding new customers. A sale for a product isn't closed when a contract is signed. It's closed when the person who uses the software has accepted it into their daily lives, because that is what prevents churn. If you've selling a small personal tool, the person who buys and the person who uses is probably the same - but in our case, the purchase decision was rarely made by the person who actually had to &lt;em&gt;use&lt;/em&gt; the software. And you &lt;em&gt;have&lt;/em&gt; to get those people on board. If anything, they're &lt;em&gt;more&lt;/em&gt; important, because they're the ones who are going to make the bosses life hell if the software they buy isn't doing the job - or worse - is doing the job too well.&lt;/p&gt;
&lt;p&gt;Over and over again, we saw internal sabotage. People would simply &lt;em&gt;refuse&lt;/em&gt; to change processes, and would find &lt;em&gt;any&lt;/em&gt; excuse. &amp;quot;Oh, the software didn't work, so I had to go back to doing it manually&amp;quot;. And after a month or two, the boss would call us and say &amp;quot;what happened to all the benefits you promised?&amp;quot;, and we'd say &amp;quot;well, you only get the benefits if you actually &lt;em&gt;use&lt;/em&gt; the software&amp;quot;.&lt;/p&gt;
&lt;p&gt;What we learned - the hard way - is that you sell to the business owner - but you also have to sell to the users. If you're dealing with software that is part of a key business process, change management is &lt;em&gt;key&lt;/em&gt;. You have to show them how your tool does what they currently do by hand. And you have to show them that their jobs aren't at risk. That first employee whose 3 hour/day task was replaced? She wasn't fired - she redeployed inside the business. She went from doing a mindless office task for most of the day, and could start expanding into other parts of the business. About 2 years after we first deployed TradesCloud, she was running accounts and payroll.&lt;/p&gt;
&lt;p&gt;But, despite all these mistakes, we were able to stumble along, and were complete self funded for almost 2 years. Now, that meant burning a lot of personal funds, and my co-founder doing a bunch of consulting on the side. But that's just part of the startup experience, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-9-establish-failure-criteria"&gt;
&lt;h2&gt;Mistake 9: Establish failure criteria&lt;/h2&gt;
&lt;p&gt;Well, maybe it is. But in retrospect, mistake number 9 was an entirely personal one - I shouldn't have lost as much money on the experience as I did. I knew what I considered success criteria, but I never considered what my failure criteria would be.&lt;/p&gt;
&lt;p&gt;After 2 years, I had reached a point where my personal financial runway was running out. TradesCloud either needed to start paying a full wage, or I wasn't going to be able to continue. And this pivoted the business. Fundraising is a full time job. Everything else goes on hold - sales, support, development - everything. We tried to get VC investment, but the VC scene in Australia is pretty bad, and even worse in Perth. Eventually, we managed to secure a $250k cash investment from a colleague of my business partner; and we got some matching funding through an Australian government program. And that gave us another 2 years of runway.&lt;/p&gt;
&lt;p&gt;The way we were able to secure that runway was by changing our tactics. Instead of going after individual plumbers, we started going after the head contractors - the multimillion dollar facilities management companies. And we were able to sell them a really great story. These companies are all competitive, and they're looking for any advantage they can get. But they're also technologically laggards, because they're big established companies. They have inertia when it comes to adopting new technology. So we were able to walk in, and promise a mobile-enabled workforce, real-time tracking, enforced health and safety practices - all sorts of things that made them really excited, because they could use those features as differentiators against their competition.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-10-you-are-who-you-are-don-t-deny-it"&gt;
&lt;h2&gt;Mistake 10: You are who you are - Don't deny it&lt;/h2&gt;
&lt;p&gt;But - and here's mistake number 10 - we forgot who &lt;em&gt;we&lt;/em&gt; were, and who we were selling to. We were selling to multimillion dollar companies. The reason these companies are technologically laggards? They're conservative. They don't take risks. There's no incentive for individual employees to take risks. And so, they make safe decisions.&lt;/p&gt;
&lt;p&gt;And when they adopt new technology, they don't just pick something - they put it out to tender, and get multiple bids, and then they invite bidders into the head office to interrogate them, and eventually, after 6 months, they pick someone - the &lt;em&gt;safe&lt;/em&gt; option. We got into a tendering process with almost every major facilities managmeent company in Australia. The tendering process almost always started because we pitched them the idea of providing TradesCloud to all their subcontractors - but what they heard was &amp;quot;provide software to all their subcontractors&amp;quot;. And so, at the end of the tendering process, we were told, every time - we prefer your technological solution... but we're going with your competitor, because you're too risky. A 2 person company was too much of a risk for a multimillion dollar company to trust.&lt;/p&gt;
&lt;p&gt;So after 2 years of trying this tactic, and being turned down by every facility management company in Australia, the money was running out again, but i'd built up a bit of cash buffer again. But in between failing to sell to multinational companies, we'd found a bit of success selling to smaller facility management companies and large constructions companies. And the good news was that these companies were big enough that when they bought software, they wanted it customized - so as well as the $2k/month, they would pay $40k up front so that everything matches their requirements.&lt;/p&gt;
&lt;p&gt;On the back of that change, were got a loan from our investor. Between making more personal sacrifices, and that cash injection, we were able to stumble along for another 18 months.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-11-take-the-hint"&gt;
&lt;h2&gt;Mistake 11: Take the hint&lt;/h2&gt;
&lt;p&gt;This was mistake number 11. We didn't take the hint. Each of those points where we took investment was, potentially, a point that would have been a natural point to shut down the business. And, in retrospect, we should have. The writing &lt;em&gt;was&lt;/em&gt; on the wall. The simple truth is if you can't close sales, you don't have a business. And yes - you can stumble along hoping that you're going to find the missing sales ingredient - but that takes resources. It takes money, and it takes emotional capital as well.&lt;/p&gt;
&lt;p&gt;One of the reasons the failure of TradesCloud was so personally galling, is that it didn't fail for any reason that I would consider &amp;quot;my fault&amp;quot;. From a purely technical perspective, we were significantly more reliable than the multi-national companies we were integrating with. We delivered new features in timeframes that our customers considered inconceivable. When I went in an did demonstrations to the multimillion dollar head contractors, they expressed doubt that we could actually do what we said we were doing... right up until I showed them the code doing it, live.&lt;/p&gt;
&lt;p&gt;But none of that mattered. TradesCloud failed, ultimately, because we couldn't sell what we had - or, at least, we couldn't sell it in quantities that allowed us to cover costs. And when you're there giving your all, doing things that are being called magic by prospective customers... and you're still failing... that's hard to internalize. And when you layer on top of that the fact that I'm a husband and a father, and the sole income for the family - that introduces all sorts of guilt and fear into the mix. And then you take all that stress, and add in the long hours and weekend work in the desperate hope that &lt;em&gt;this&lt;/em&gt; will be the thing that saves the company...&lt;/p&gt;
&lt;blockquote class="twitter-tweet" data-conversation="none" data-lang="en"&gt;&lt;p lang="en" dir="ltr"&gt;And when work is all that defines you, you will feel like you&amp;#39;re dying when it starts to disappoint.&lt;/p&gt;&amp;mdash; Alice Goldfuss (@alicegoldfuss) &lt;a href="https://twitter.com/alicegoldfuss/status/827280884998893569"&gt;February 2, 2017&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;&lt;p&gt;... and you start to understand why, 2 years ago, I had a major depressive episode.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-12-quitting-is-always-an-option"&gt;
&lt;h2&gt;Mistake 12: Quitting is &lt;em&gt;always&lt;/em&gt; an option&lt;/h2&gt;
&lt;p&gt;Mistake number 12 - I lost sight of the fact that &lt;em&gt;quitting&lt;/em&gt; was always an option - and that quitting didn't mean failure. If, after 2 years, I had taken an honest audit and said &amp;quot;you know what - this isn't working. I'm out&amp;quot;. I would have had 4 years of my life back. That's four years I could have sunk into a different project. But I didn't pay attention to any of &lt;em&gt;my&lt;/em&gt; signs. I conflated success of the company with my own personal success. I lost sight of the fact that this was a job. And it was meant to provide some income and some intellectual engagement. And if it wasn't doing that - walking away was &lt;em&gt;always&lt;/em&gt; an option. But I didn't ever really consider it seriously.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="mistake-13-partnerships-require-actual-partners"&gt;
&lt;h2&gt;Mistake 13: Partnerships require actual partners&lt;/h2&gt;
&lt;p&gt;Why not? Well that was mistake number 13, and it was another personal failure - I didn't stand up to my co-founder as much as I should have. And as a result, we wasted a lot of time, and effort, and in some cases, money. Now - I have to be clear - if only because there's a chance he might see this video - i'm not blaming Mark here. Mark is a great guy, and he's extremely talented, and he's got absolutely no shame at fronting up to companies thousands of times bigger than his, and telling them how they should be doing things. He opened a lot of doors that I know I wouldn't have ever even considered knocking on, let alone opening. He was a real asset to the business. The failure was a personal one, and it was mine.&lt;/p&gt;
&lt;p&gt;We didn't go into TradesCloud as complete equals. Sure - we were 50/50 partners on paper - but when I met Mark, he was my first boss out of university. I worked for him for 4 years as a very junior subordinate. And a lot of that power dynamic remained. I let him do a lot of things because &amp;quot;well, he must know what he's doing&amp;quot;. I caved on decisions because I could see his side, and he was more experienced. And, Mark is a great sales guy. He can make you believe in things. And he made me believe in TradesCloud - but that's a double edged sword. It got me through all sorts of lows - but it also meant I believed even when I probably shouldn't have. I should have putting my foot down and said &amp;quot;no more&amp;quot; a lot more often than I did - both for the benefit of the business, and for my own mental health.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-end"&gt;
&lt;h2&gt;The end&lt;/h2&gt;
&lt;p&gt;And so, when the money ran out for the third time, neither Mark nor myself had the energy to continue. We had a couple of last minute hail-Mary options that we thought might have saved us... but one by one, they all fell through. In the end, we were able to pay back the loan to our investor; but his equity investment was essentially lost. And in January, we closed the doors for the last time.&lt;/p&gt;
&lt;p&gt;And that's the TradesCloud story. I will warn you, though, that the plural of anecdote is not data. This is my story. Many stories are like it, but this one is mine. I don't profess to having any particular business insight - I just know that TradesCloud didn't work. And these are the 13 reasons I can identify why.&lt;/p&gt;
&lt;p&gt;In the aftermath, I've had a lot of people - many of them in this room - reach out and give me a virtual hug, or a spoon. And many asked me if I was sad to see TradesCloud go. But frankly, the emotion I had was relief. On January 31 2017, I slept like I hadn't slept for 6 years - because I &lt;em&gt;knew&lt;/em&gt; I wasn't going to be woken up by a server alarm. And I knew I could sleep in, because I wasn't going to get a support call at 6AM.&lt;/p&gt;
&lt;p&gt;The fact that I wasn't even slightly disappointed by the loss of TradesCloud from my life - that's the biggest sign for me that I waited &lt;em&gt;far&lt;/em&gt; too long to step away.&lt;/p&gt;
&lt;p&gt;The good news, though, it that the process of running TradesCloud hasn't burned me completely. It was an amazing learning experience. And I landed on my feet - At DjangoCon US last year, I put my name up on the jobs board saying I was looking, and it hadn't been there half a day before my good friend Andrew Pinkham approached me and said.. Uh... are you &lt;em&gt;that&lt;/em&gt; Russell Keith-Magee looking for work?&lt;/p&gt;
&lt;p&gt;The other silver lining is that the TradesCloud experience drew my attention to problems in the world of mobile development, which has influenced the path that my new toy, &lt;a class="reference external" href="https://pybee.org"&gt;BeeWare&lt;/a&gt;, has taken. And I've been busy trying to work out how to turn BeeWare into something.&lt;/p&gt;
&lt;p&gt;But this time, I'm a little older. A little grayer. Hopefully a little wiser. And I should have a better idea what to look out for. If you want to talk about &lt;em&gt;that&lt;/em&gt;... well... &lt;a class="reference external" href="mailto:russell&amp;#64;keith-magee.com"&gt;get in touch&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Searching for a new place to hang my hat</title><link href="https://cecinestpasun.com/entries/searching-for-a-new-place-to-hang-my-hat/" rel="alternate"></link><updated>2017-05-31T08:00:00Z</updated><author><name></name></author><id>urn:uuid:335858ec-f7db-3ccc-9041-3b88d4158159</id><content type="html">&lt;p&gt;&lt;a class="reference external" href="/entries/quo-vadimus/"&gt;Back in January&lt;/a&gt;, I announced that I was shutting down TradesCloud, my 6-year old startup. I was very fortunate to be given a very soft landing with some good friends at &lt;a class="reference external" href="https://jambonsw.com"&gt;JamBon Software&lt;/a&gt;. However, that was a contract tied to a specific project; that project has now come to a close, and while I thoroughly enjoyed working with Andrew and the team at JamBon, the upcoming projects they have in their pipeline either don't match my skills, or would require me to be on-site.&lt;/p&gt;
&lt;p&gt;This means I am, for the first time since completing my PhD 16 years ago, jobless.&lt;/p&gt;
&lt;p&gt;I recently &lt;a class="reference external" href="https://pybee.org/news/buzz/a-request-for-your-help/"&gt;started fund raising&lt;/a&gt; with the aim of allowing me to work on BeeWare full time. I've had some fantastic support from the community, but I'm still a long way off being able to justify making BeeWare my full-time job.&lt;/p&gt;
&lt;p&gt;I still want to try and make funded open source development work; but in the meantime, I need a job. So, this is a reverse job advertisment. I'm available for hire. Here's what I'm looking for.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p class="first"&gt;I'm based in Perth, Western Australia, and I'm not looking to relocate. I have  strong family ties in Perth, and some other personal reasons for not wanting to move - so unless an offer is &lt;em&gt;extraordinarily&lt;/em&gt; lucrative, I'm not looking to move.&lt;/p&gt;
&lt;p&gt;I'd like to think that I've proven I can make telecommuting work. I've been telecommuting for almost 10 years now, spanning up to 12 time zones. Some of that telecommuting has been very public - after all, what is an open source project like Django but a huge telecommuting community.&lt;/p&gt;
&lt;p&gt;And as my conference travel schedule will attest, I'm not opposed to travel - either for regular meetups with a dev team, or to be face-to-face with a customer.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I've developed a lot of reputation in the Python community with Django and BeeWare, so I'd like to stay in those communities and leverage that experience as much as possible. There's always room for other languages in any technology stack, but if my life doesn't contain a healthy dose of Python, I'm not going to be happy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I don't have any particular domain of interest. I have a background in Physics and Artificial Intelligence, but I can get excited about surprisingly mundane problems - as my 5 year dalliance with plumbers and electricians will attest. As long as there's a technical challenge lurking, I can find interest.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I'm happiest as a developer when:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I've got a problem to solve that has a clear success criteria. Implement protocol X. Make Y 20% faster. Build an interface between A and B. It's done when it works - no subjectivity or opinion about it.&lt;/li&gt;
&lt;li&gt;I get to see the look in someone's eyes when you're teaching them, the penny drops, and they see some tangible result of their learning efforts.&lt;/li&gt;
&lt;li&gt;I get to see someone in the wild actually use something I've developed to solve a real world problem.&lt;/li&gt;
&lt;li&gt;I have long term engagement in a problem. I'm sure I could make a lucrative career in short-term consulting; but I need to feel invested in what I'm doing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I enjoy working with diverse teams, and I expect employers to back that up, not just give lip service to the idea.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;I'm passionate about Open Source. I'm not a complete zealot - I appreciate that there is a place for commerical and proprietary software - but where possible, I like to collaborate and give back to the community as a whole. That means contributing to existing open source projects (like BeeWare and Django), or open sourcing internal tools that others may find useful. If a role at your company gave me the opportunity to work on BeeWare tools, that would be &lt;em&gt;amazing&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p class="first"&gt;While I've historically been in senior engineering and CTO roles, I'm interested in stretching into developer relations. I enjoy public speaking and delivering training. If there's a way for an employer to make use of the fact that I enjoy a stage, then I'm happy to oblige.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Do I sound like someone who would be a good match for your team? If you think you've got a position that might be a good match, &lt;a class="reference external" href="mailto:russell&amp;#64;keith-magee.com"&gt;get in touch&lt;/a&gt;. I've also got a &lt;a class="reference external" href="/about/CurriculumVitae-RussellKeith-Magee.pdf"&gt;more traditional Curriculum Vitae&lt;/a&gt;.&lt;/p&gt;
</content></entry><entry><title>Moving to Lektor</title><link href="https://cecinestpasun.com/entries/moving-to-lektor/" rel="alternate"></link><updated>2017-04-29T16:00:00Z</updated><author><name></name></author><id>urn:uuid:cf7dfb79-e197-3984-b6bd-d28999199ec1</id><content type="html">&lt;p&gt;Almost nine years ago, I launched cecinestpasun.com as my personal blog. At the time it was a Django 1.0 site. I've used it intermittently, but never really paid any attention to it.&lt;/p&gt;
&lt;p&gt;So, instead of persisting in the upkeep of a blog (and blog software) that is massive overkill for my small amount of publishing, I've moved the content over to &lt;a class="reference external" href="https://getlektor.com"&gt;Lektor&lt;/a&gt;, published as static content on &lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt;. I've used Lektor for the &lt;a class="reference external" href="https://pybee.org"&gt;BeeWare&lt;/a&gt; homepage, and it's proven very enjoyable to work with, and it allowed me to port over my old Django content in a morning.&lt;/p&gt;
&lt;p&gt;I'm hoping to to a visual refresh in the near future; but in the meantime, I can at least save some money on hosting.&lt;/p&gt;
</content></entry><entry><title>Opposing preference deals with the right</title><link href="https://cecinestpasun.com/entries/opposing-preference-deals-right/" rel="alternate"></link><updated>2017-02-13T07:47:54Z</updated><author><name></name></author><id>urn:uuid:3823064e-023a-3a0c-a335-54fc3730e10c</id><content type="html">&lt;p&gt;The WA Liberal party recently announced a preference deal with the right-wing One Nation party in the upcoming state election. I wrote this letter to my local member, Mr Peter Abetz.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Dear Mr Abetz,&lt;/p&gt;
&lt;p&gt;I write to you as my local member during this election season to express my extreme displeasure at the fact that the WA Liberal Party has announced plans to preference One Nation over the Nationals on their Legislative Council ticket in this upcoming election.&lt;/p&gt;
&lt;p&gt;One Nation is a blight on the Australian political landscape. Their brand of extreme right wing nationalism has no place in a civilised society. Internationally, the rise of the far right into positions of power is a trend that disturbs me greatly.&lt;/p&gt;
&lt;p&gt;It offends me deeply that the Liberal party is willing to pander to a group like One Nation in the hope of securing preferences. It demonstrates a disturbing lack of awareness of the history of such manoeuvres. The number of right wing and extremist candidates that have been inadvertently elected to positions of power by such deals is significant.&lt;/p&gt;
&lt;p&gt;More importantly, it shows a complete lack of moral leadership. To make a deal with the far right in an attempt to deny the Nationals - a one time coalition partner - power, strikes me as the perfect example of cutting off one's nose to spite one's face.&lt;/p&gt;
&lt;p&gt;I consider myself a centrist swing voter. I know that I (and every other citizen) is free to cast my vote below the line in defiance of any official preference deal. However, this single decision on behalf of the Liberal party has ensured that I will cast no vote favouring the Liberal party in this upcoming State election. If you and the Liberal party cannot find the moral fortitude to oppose nationalism, then I hold very little hope that they will &amp;quot;Put people first&amp;quot;, or represent any of the &amp;quot;family values&amp;quot; that I hold dear.&lt;/p&gt;
</content></entry><entry><title>Quo Vadimus</title><link href="https://cecinestpasun.com/entries/quo-vadimus/" rel="alternate"></link><updated>2017-01-01T12:52:28Z</updated><author><name></name></author><id>urn:uuid:5bb18c14-858f-3a9a-837f-a73793d90f5d</id><content type="html">&lt;p&gt;It’s been 6 years, almost to the day, since I started work on my startup, TradesCloud. And it’s been a rollercoaster ride.&lt;/p&gt;
&lt;p&gt;TradesCloud was mostly self-funded. We did take a small tranche of investment from a friend, as well as some matching funds from an Australian Government program, but we were never able to attract VC interest to provide a large injection of funds.&lt;/p&gt;
&lt;p&gt;Initially, that didn't matter. We started with a bang. Our first customer was incredibly lucrative, and required surprisingly little technical work. The next couple of customers we similarly lucrative, and really easy sales to close. We were proud to be self funded, kicking against the prevailing wisdom of the Valley that said you needed million dollar valuations to succeed.&lt;/p&gt;
&lt;p&gt;Unfortunately, that initial success was misleading. We never managed to grow, and although we slowly picked up customers, we never reached a point where we were cash flow positive.&lt;/p&gt;
&lt;p&gt;We tried - and failed - to sell to small companies; but we never found an effective sales channel. Small companies in the home services market (plumbers, electricians, and so on), don't like computers or computer software. The only thing they like less than computers and computer software are the people who sell them computers and computer software. They've been burned many times before by sales people who have told them about the miracles computers can do for them. So when someone turns up on their doorstep and proclaims that they have the answer to all their problems, it doesn't even matter if it's true - you don't get past the front desk.&lt;/p&gt;
&lt;p&gt;We tried - and failed - to sell to large multinational companies too. The story here was different, but repeated with every potential customer we found. Initially, they denied there was a problem. Then they accepted there was problem, but denied they needed to fix it. Then you got a break - you found someone who had just moved into a management position at the company, and was looking to make quick win by adopting something high profile. Mobile enabled cloud solutions fit that bill nicely. They'd ask for a few meetings, then because they need to cover their asses, they'd start a multi-month RFC bidding process... and then pick some other company's solution. After the fact, we were consistently told that we had the superior technical product, but that we were too big of a strategic risk because we were a 2 person company. Never mind that as soon as we made one of these deals, we wouldn't be a 2 person company any more. Nobody ever got fired for buying IBM, so they would go with the bigger, less capable, but less &amp;quot;risky&amp;quot; option.&lt;/p&gt;
&lt;p&gt;We had a small amount of success with medium sized companies. However, the companies that could see the strategic advantage usually only saw the benefit because they were groaning under the weight of their internal administrative processes, which were mature enough to identify that a problem existed, but not mature enough to efficiently affect a company-wide change to a new process. They were also usually reaching out to us because their accounting department had established that they were on a trajectory toward bankruptcy if they didn't fix things. As a result, several of our medium-sized customers went bankrupt or closed their doors within months of adopting TradesCloud - not because of TradesCloud itself, but because their businesses weren't healthy to begin with, and they weren't able to realise the benefits of a streamlined process in time.&lt;/p&gt;
&lt;p&gt;As a result, for the entirely life of TradesCloud we suffered a simple cash flow problem. We didn't have enough customers, generating enough revenue, to pay our own salaries and the server resources needed. There have been many months where my business partner and I haven't drawn a salary, or have only drawn partial salaries; and while you can do that for a while if there is promise of a brighter tomorrow, every bank balance has it's limit.&lt;/p&gt;
&lt;p&gt;We contemplated keeping the product alive in a &amp;quot;limpalong&amp;quot; mode. We do have &lt;em&gt;some&lt;/em&gt; customers, and those customers are incredibly loyal, and have told use they don't want to see TradesCloud go. However, it isn't quite that easy. TradesCloud isn't set-and-forget business. It requires ongoing maintenance, and it generates support queries. Those support queries aren't easy to offload - many of them require critical thinking skills and knowledge of the TradesCloud codebase. But they're not enough to consume 1 FTE. Essentially, we'd need to find someone who would be willing to operate on a contract where they would only get a couple of hours work a week, but at completely unpredictable times - and they would have to drop everything when the phone rang. That's not an easy employee to find - or if you can find them, they're not cheap.&lt;/p&gt;
&lt;p&gt;And this isn't a task that I'm willing or able to continue long term, either. As I've &lt;a class="reference external" href="https://www.youtube.com/watch?v=OC3v5uXR9Qc"&gt;made quite public&lt;/a&gt;, I had a major depressive episode last year - due, in no small part, to the fact that I had been carrying the pager for TradesCloud 24x7 for 4 and a half years. I've had symptoms that come close to PTSD when my SMS tone rings. For 6 years, I have been scheduling conference travel over weekends and redoes to make sure I'm in the air during business hours. I have stood on the balcony of hotels in the south of France at 3 in the morning answering support calls from customers who have just started their day in Australia. And during my episode, and in the 18 months since, I've &lt;em&gt;still&lt;/em&gt; been carrying the pager. That isn't good for my mental health.&lt;/p&gt;
&lt;p&gt;And so, we reach the end of our six year journey. At close of business on January 31, TradesCloud will be shut down.&lt;/p&gt;
&lt;p&gt;We're still exploring a couple of fire-sale options. There is enough interest in the capabilities of TradesCloud that we might be able to sell the codebase for someone else to operate. It would be nice to get &lt;em&gt;some&lt;/em&gt; payoff from 6 years of effort, but it certainly won't be time to order the gold-plated Lamborghini.&lt;/p&gt;
&lt;p&gt;It's a bittersweet moment. On the one hand, I'm sorry to see 6 years of effort fail. But I'm also ready to move on. In truth, I've been ready to move on for quite some time. And now I actually can.&lt;/p&gt;
&lt;p&gt;One of my favourite TV writers is Aaron Sorkin. Sorkin's first TV show was called &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Sports_Night"&gt;Sports Night&lt;/a&gt; - a &amp;quot;behind the scenes&amp;quot; look at a late night cable sports news show. It was an odd piece - it was originally sold as a sitcom (canned laughter track and all). While it was incredibly funny, it wasn't &lt;em&gt;that&lt;/em&gt; kind of funny. It was very deep and intelligent humor. It also had moments of profound insight and wisdom. It was notionally about sport, but it was very rarely &lt;em&gt;just&lt;/em&gt; about sport - and when it was, it was about the grandest intentions of sport, not the vain personality show and advertising opportunity that most modern sports have become. The show shares a lot of similarities (and more than a couple of plot lines) with Sorkin's most famous piece, The West Wing.&lt;/p&gt;
&lt;p&gt;When Sports Night was cancelled, they were able to run the show out with a storyline about the parent company selling it's cable station because it wasn't profitable. The entire team behind the Sports Night show (the fake on air one) were worried that they were going to lose their jobs. Dana, the show's producer, meets a man in a bar during her lunchbreak who offers some advice:&lt;/p&gt;
&lt;p&gt;&amp;gt; &amp;quot;I'm what the world considers a phenomenally successful man. And I've failed much more than I've succeeded. And each time I fail, I get my people together, and I ask them - Where are we going? And it starts to get better.&amp;quot;&lt;/p&gt;
&lt;p&gt;Dana is not entirely satisfied with this advice. But unbeknownst to Dana, the man was the owner of a media company who, shortly thereafter, puts in a bid for the cable company, and then declares his intention to preserve the cable channel. The name of the company is Quo Vadimus - Latin for &amp;quot;Where are we going?&amp;quot;.&lt;/p&gt;
&lt;p&gt;The time has come for me to ask myself: Quo vadimus?&lt;/p&gt;
&lt;p&gt;I'm not desperate for work. After a conversation at DjangoCon US in Philadelphia last year, Andrew Pinkham and the fine folk at &lt;a class="reference external" href="https://jambonsw.com"&gt;Jambon Software&lt;/a&gt;  offered me a contract. It's been extremely liberating to be able to sink my teeth into a new set of technical challenges in new domains.&lt;/p&gt;
&lt;p&gt;Jambon have also given me some liberty to work on &lt;a class="reference external" href="http://pybee.org"&gt;BeeWare&lt;/a&gt; on company time. BeeWare has been a big part of my open source contribution over the last couple of years, and I'm just starting to get to the point where that work is paying off. I'm hoping that over the next six months, BeeWare will start showing some highly visible results. In my ideal world, I'd like to be working on BeeWare full time, with a team of people - but I need to work out how to pay for that.&lt;/p&gt;
&lt;p&gt;I don't know exactly what the future holds, but I have hope - and that's more than I've been able to say for a while.&lt;/p&gt;
</content></entry><entry><title>On a replacement for Twitter</title><link href="https://cecinestpasun.com/entries/replacement-twitter/" rel="alternate"></link><updated>2016-02-06T11:04:47Z</updated><author><name></name></author><id>urn:uuid:73ff1011-84c7-371b-abb1-301fc39101c9</id><content type="html">&lt;p&gt;I've been a user of Twitter for almost 8 years. Over that time, I've gone from a skeptic, to a regular user, to someone for whom Twitter is an indispensible tool for keeping in touch with the outside world. The tipping point for me was when I left my 9-5 office job and started working from home. All of a sudden, I lost the &amp;quot;water cooler&amp;quot; conversations that an office allows. Twitter provided that outlet.&lt;/p&gt;
&lt;p&gt;However, over the last few years, I've become acutely disappointed in Twitter as a product, and Twitter the company behind it. And I'm not alone; a number of my friends - the people who I'm on Twitter to keep in touch with - have abandoned the platform altogether.&lt;/p&gt;
&lt;p&gt;There are a litany of well established problems with Twitter as a platform. Twitter has consumed an ungodly amount of VC money, and has at their disposal an small army of engineers. Yet these not-insignificant resources are routinely being spent on features that nobody wants or needs.&lt;/p&gt;
&lt;p&gt;Some of these decisions are understandable. As part of becoming a financially viable company, Twitter needs to find an economic model that will validate their multi-billion dollar market cap. Since they've chosen an advertising driven revenue model, it's inevitable that a good chunk of their resources will be spent enhancing the advertisment delivery process. To that end, features like promoted tweets are inevitable, and while I don't like ads in my tweet stream, I can see why, given Twitter's business model, they are necessary.&lt;/p&gt;
&lt;p&gt;However, other engineering priorities are completely nonsensical. There are many aspects of Twitter's engineering priorities that could be criticized, but the most significant is their approach to handling (or &lt;em&gt;not&lt;/em&gt; handling) spam and harassment. Twitter has made repeated statements that they will focus on harrassment on their platform. Every time this happens, well recognized experts in the field suggest things that could be done, many of which are quite simple. And Twitter takes that input, and directs their engineering team to change &amp;quot;Favourites&amp;quot; to &amp;quot;Likes&amp;quot;, or implement &amp;quot;Polls&amp;quot; And then 18 months later, another &amp;quot;we take harassment seriously&amp;quot; press release is published, and the cycle repeats.&lt;/p&gt;
&lt;p&gt;Over the last year or so, I've become increasingly of the opinion that Twitter's time has now passed. They've had plenty of opportunity to correct the problems with their platform. And instead of fixing the problems, they appear to be dedicated to making their platform worse. At this point, I'm looking for a replacement.&lt;/p&gt;
&lt;div class="section" id="building-a-new-platform"&gt;
&lt;h2&gt;Building a new platform&lt;/h2&gt;
&lt;p&gt;So - what would a replacement for Twitter look like?&lt;/p&gt;
&lt;div class="section" id="native"&gt;
&lt;h3&gt;Native&lt;/h3&gt;
&lt;p&gt;There's nothing wrong with having a website - it's a natural thing for a web service to have - but for a tool like a microblogging platform, it's essential that there is a native, well integrated app experience on both desktop and mobile platforms from Day One.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="decentralized"&gt;
&lt;h3&gt;Decentralized&lt;/h3&gt;
&lt;p&gt;Microblogging platforms are the first communications protocols that are based on  monolithic central stores. All the protocols that have been of historical importance - email, Usenet, RSS - were all decentralized from the outset.&lt;/p&gt;
&lt;p&gt;The idea that all the world's communication is stored in a single company's database - be it Twitter, Google, or Facebook - scares me no end. It means if the company folds, an entire generation of content could be lost. It also makes an easy target for any government that wants to curtail or control speech.&lt;/p&gt;
&lt;p&gt;Decentralization has the added benefit that it is a better engineering solution. It's been a while since the Fail Whale was a regular occurrence, but a decentralized network would be much less prone to whole-network outages, and a harder target for malicious parties to attack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trust"&gt;
&lt;h3&gt;Trust&lt;/h3&gt;
&lt;p&gt;As a monolithic silo, Twitter holds the keys to who is considered &amp;quot;trusted&amp;quot; on their platform. You can get the blue checkmark as a verified account, which enables (&lt;em&gt;ahem&lt;/em&gt;) Brands to establish themselves as official mouthpieces - but beyond that, this verification process isn't very enlightening.&lt;/p&gt;
&lt;p&gt;Being decentralized introduces the opportunity for different measures of trust to be used. Imagine a decentralized network with a wide range of nodes providing authentication. One node might require members to provide proof of identity. Another might require all members to sign (and adhere to) a code of conduct. Yet another might allow entry by invitation only. This process of distribututed trust is then a source of data that can be used to acheive other goals.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="safety"&gt;
&lt;h3&gt;Safety&lt;/h3&gt;
&lt;p&gt;If a platform has the a solid concept of trust networks at it's core, that means it's also in a much better position to deal with issues of harassment. For example, I could mark my account to refuse contact, or refuse to distribute my content that can't prove they've signed a CoC.&lt;/p&gt;
&lt;p&gt;The safety of people who are going to use the network needs to be the prime consideration, not an afterthought.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-protocol-not-a-platform"&gt;
&lt;h3&gt;A Protocol, not a Platform&lt;/h3&gt;
&lt;p&gt;All of these points point to the important factor being the protocol, not the platform. While a solid reference implementation definitely needs to exist, it's also essential that others can develop their own protocol-compliant implementations, improving the reference implementation, and expanding upon it.&lt;/p&gt;
&lt;p&gt;It's also essential that the protocol itself have a mechanism for expansion. If I want to add a new type of content, I should be able to do so. It's then up to the writers of clients to determine if they need to support various protocol extensions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="financially-viable"&gt;
&lt;h3&gt;Financially viable&lt;/h3&gt;
&lt;p&gt;I'm not interested in adopting a new communications platform unless the future of that platform is secure. A lot of the poor decisions being made by Twitter are being made for financial, rather than enigneering or social reasons. This means that any new social network needs to have an answer for how they're going to be financially viable.&lt;/p&gt;
&lt;p&gt;This is something that &lt;em&gt;might&lt;/em&gt; be achievable with VC money, but I think it's much more likely that the answer to this problem will be just as distributed as the network itself. VC's have tried to bootstrap several social networks with a huge piles of promotional cash - Path, Ello, Peach, and others - and each of these attempts has failed spectacularly.&lt;/p&gt;
&lt;p&gt;Nobody is going to leave Twitter in favour of an identical clone of Twitter. There needs to be a &lt;em&gt;reason&lt;/em&gt; to adopt a new network, and money can't make people care. The features that &lt;em&gt;will&lt;/em&gt; make people care - things like removing advertising or centralized control of the network - often reduce the value of the platform as a whole (or, at least, the value to investors, who want a return on their investment).&lt;/p&gt;
&lt;p&gt;App.net came close to achieving financial viability in 2012 - they sold subscriptions, and for a year or so, were financially viable. However, they weren't able to maintain subscriptions. This is largely because they didn't have an answer for...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-critical-mass-problem"&gt;
&lt;h3&gt;The Critical Mass Problem&lt;/h3&gt;
&lt;p&gt;... how to deal with the cricital mass problem. For the moment, at least, almost everyone I know is on Twitter. Until a critical mass of my friends are on a new platform, I don't particularly want to run Yet Another Social Network Program on my computer and phone. When App.net started, I signed up... and then didn't use my account after a month, beacuse everyone I knew was still on Twitter.&lt;/p&gt;
&lt;p&gt;A new social network needs to have a good reason for people to commit to using it. This might happen because Twitter does something so monumentally stupid that everyone leaves at once, but there would need to be something waiting in the wings to take over.&lt;/p&gt;
&lt;p&gt;Alternatively, there needs to be a bridge between existing networks and new ones.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ease-of-use"&gt;
&lt;h3&gt;Ease of use&lt;/h3&gt;
&lt;p&gt;Above all, it should be no harder to get started with this new platform than it is to get started with Twitter. If your installation instructions start with &amp;quot;First, generate a 4096-bit RSA public key&amp;quot;, you've just failed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="satisfying-the-wish-list"&gt;
&lt;h2&gt;Satisfying the wish list&lt;/h2&gt;
&lt;p&gt;The good news is that there are several decentralized microblogging platforms out there. The bad news is that unfortunately, they appear to be largely developed by people who are more interested in the technology than the platform. Advertising your network as being &amp;quot;based on Bitcoin and Bittorrent&amp;quot; doesn't tell me why I should use your platform - it tells me what technology you're using. Frankly, I don't care if my social network is implemented with carrier pigeons - as long as it lets me get the job done.&lt;/p&gt;
&lt;p&gt;A decentralized microblogging platform probably will use Distributed Hash Trees or blockchain technology - but that can't be the focus of development or the primary marketing message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="my-dream-platform"&gt;
&lt;h2&gt;My dream platform&lt;/h2&gt;
&lt;p&gt;So - how &lt;em&gt;do&lt;/em&gt; we get a replacement for Twitter?&lt;/p&gt;
&lt;p&gt;Well, my dream platform would be a lot more than just a Twitter replacement - it would be a platform for building rich communication interfaces, with microblogging being just one important channel. Consider all the various ways that we communicate with each other at the moment:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Microblogging platforms like Twitter and Facebook&lt;/li&gt;
&lt;li&gt;Sharing platforms like Flickr, Instagram, and Vine&lt;/li&gt;
&lt;li&gt;Long-form blogging platforms like WordPress and Medium&lt;/li&gt;
&lt;li&gt;Chat tools like IRC, ICQ, Hipchat and Slack&lt;/li&gt;
&lt;li&gt;Broadcast platforms like Twitch and Periscope&lt;/li&gt;
&lt;li&gt;Commenting platforms like Disqus&lt;/li&gt;
&lt;li&gt;Forum platforms like Discourse&lt;/li&gt;
&lt;li&gt;Formal communications over email&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Each of these types of media requires a different mode of interaction with the content they distribute - but they're fundamentally about getting a chunk of content - be it a 140 character tweet, a photo, or a streaming URL - from one user to one-or-many other users in a timely fashion, and soliciting responses in different forms.&lt;/p&gt;
&lt;div class="section" id="making-it-real"&gt;
&lt;h3&gt;Making it real&lt;/h3&gt;
&lt;p&gt;Of course, this sort of abstraction is, more often than not, a complete distraction to actually making a product real. However, in this case, I think it provides a path to potential financial stability, and a way to overcome the critical mass problem.&lt;/p&gt;
&lt;p&gt;The key point to remember is that all the content is linked and distributed using the same protocol. A long-form blog can be shared in the same way as a microblog message or a photo. A message can reply to a photo, or a photo reply to a blog post.&lt;/p&gt;
&lt;p&gt;This means you can pick on one of the services as a starting point, and as long as the protocol has room for expansion, other services can come later - and other parties can contribute applications that use the protocol.&lt;/p&gt;
&lt;p&gt;Financial viability comes in providing the &amp;quot;first seed&amp;quot;. A distributed protocol will require some nodes to be permanently available for discovery purposes. This is especially important in the early days, when there might not be enough participants in the network to ensure that content is shared efficiently. Providing this &amp;quot;first seed&amp;quot; service could be offered as a paid service.&lt;/p&gt;
&lt;p&gt;Why would people pay for this service? Well, this first seed could also provide the bridging services - gathering content from, and rebroadcasting content onto, existing social networks. For example, any short message or photo posted on the network could be reposted to Twitter; one of the roles of the paid service would be to provide a publicly visible web presence for any content shared.&lt;/p&gt;
&lt;p&gt;In these early days, the paid offering would look very similar to a hosted blogging or photo sharing platform. However, embedded in that blogging platform is the incentive for others to engage deeper with the platform - by creating an account on the network, you can interact with this hosted content in a richer way, and post your own content.&lt;/p&gt;
&lt;p&gt;Once the network is established, the bridging and seeding services will become less important, but other services - such as the trust and authentication network - will become more important.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Of course, the devil is absolutely in the detail. The core protocol design needs to be robust, the core marketing message of the initial product offering needs to be clear and polished so that it doesn't get written off as &amp;quot;Yet Another X Clone&amp;quot;, and the product itself actually has to be compelling.&lt;/p&gt;
&lt;p&gt;However, I really do think that the time is ripe for a new service to take the stage and change the web for the better. Twitter has made making too many mis-steps of late and hasn't shown any serious signs that they're interested in correcting them. Facebook doesn't present a fundamentally better vision of the future.&lt;/p&gt;
&lt;p&gt;But after 25 years of use, abuse, and refinement, some common patterns are starting to emerge in the way we communicate, and I think there's an opportunity to re-think the whole thing from the ground up, and build a decentralized platform for communication that incorporates concepts of authentication and trust at the core.&lt;/p&gt;
&lt;p&gt;I only wish I had enough time to look into this more seriously. As it stands, I already have far too many side projects - and a project like this could easily become all consuming.&lt;/p&gt;
&lt;p&gt;In the meantime, if you want to share your thoughts about this, I'm &lt;a class="reference external" href="https://twitter.com/freakboy3742"&gt;&amp;#64;freakboy3742 on Twitter&lt;/a&gt;. If I ever end up on another platform, I imagine I'll be &lt;tt class="docutils literal"&gt;&amp;#64;freakboy3742&lt;/tt&gt; there, too.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Expressing disappointment in my government</title><link href="https://cecinestpasun.com/entries/expressing-disappointment-my-government/" rel="alternate"></link><updated>2015-08-28T14:43:09Z</updated><author><name></name></author><id>urn:uuid:118bb275-d6f9-3f0d-9e5a-ef2bc50ece6d</id><content type="html">&lt;p&gt;Today, I wrote a letter to my Member of Parliament, Ken Wyatt, Member for Hasluck. Mr Wyatt is a member of Liberal Party, which forms the dominant part of the Coalition that currently forms government in Australia, under the leadership of Prime Minister Tony Abbott.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Dear Mr Wyatt,&lt;/p&gt;
&lt;p&gt;I am a resident in your electorate. I write to express my extreme disappointment in the actions of the government you are a part of.&lt;/p&gt;
&lt;p&gt;Three issues in particular have moved me to express my frustration to you.&lt;/p&gt;
&lt;div class="section" id="marriage-equality"&gt;
&lt;h2&gt;Marriage Equality&lt;/h2&gt;
&lt;p&gt;Firstly, I wish to express my dismay at the complete lack of leadership that the government is showing on the question of marriage equality.&lt;/p&gt;
&lt;p&gt;I am a married, heterosexual man. I have many LGBTQI friends. I am utterly appalled at the notion that members of my government believe that the loving relationships they have with their partners are somehow &amp;quot;less&amp;quot; than the relationship I have with my wife.&lt;/p&gt;
&lt;p&gt;Every reputable poll taken on the issue confirms that I am in the overwhelming majority of Australians in holding this position. New Zealand, the USA, United Kingdom, Ireland, South Africa and Canada - countries that have been close partners of Australia - have all agreed on this issue.&lt;/p&gt;
&lt;p&gt;Yet, it took the Liberal/National party room 6 hours to decide that it was too hard to decide that event a &lt;em&gt;conscience vote&lt;/em&gt; was called for.&lt;/p&gt;
&lt;p&gt;Every complaint or objection I have ever heard against gay marriage is utterly laughable - especially from a government that professes to stand for individual liberty. Your own party founder, Robert Menzies put it best:&lt;/p&gt;
&lt;p&gt;&amp;quot;As the etymology of our name 'Liberal' indicates, we have stood for freedom. We have realised that men and women are not just ciphers in a calculation, but are individual human beings whose individual welfare and development must be the main concern of government ... We have learned that the right answer is to set the individual free, to aim at equality of opportunity, to protect the individual against oppression, to create a society in which rights and duties are recognised and made effective.&amp;quot;&lt;/p&gt;
&lt;p&gt;How any member of the Liberal party can reconcile that statement of principles with an opposition to even &lt;em&gt;voting&lt;/em&gt; on gay marriage in the parliament genuinely astounds me.&lt;/p&gt;
&lt;p&gt;I am especially concerned at the prospect that Liberal Party policy now appears to be leaning towards a referendum or plebiscite on this issue. This is a cop-out response - and a response demonstrating a stunning absence of leadership from a government, especially one that professes to be one of &amp;quot;strong leadership&amp;quot;.&lt;/p&gt;
&lt;p&gt;Completely aside from the massive waste of taxpayer funds that would be necessary to execute a popular vote, I have genuine concerns about the effect that the public debate would have on those who are affected by this issue. It would &lt;em&gt;require&lt;/em&gt; hate-filled organisations such as the Australian Marriage Forum to be provided taxpayer funds to spray hateful statements over public airwaves, in the interests of a &amp;quot;full and frank debate&amp;quot;. LGBTQI people are already the subject of discrimination and abuse on a daily basis. They don't require the government to be actively funding their abuse.&lt;/p&gt;
&lt;p&gt;You don't even need to look far to see what the timbre of the debate will be - &amp;quot;Won't someone think of the children&amp;quot; - as if child molestation was the sole domain of gay individuals. Protests about children having the &amp;quot;right&amp;quot; to 2 parents of different sex - and ignoring the fact single parent families are entirely legal, and that multiple studies have demonstrated that the important thing is having 2 &lt;em&gt;loving&lt;/em&gt; parents, not 2 mixed-sex parents. This debate will do almost nothing to further the state of debate. If the government took the time to actually communicate with LGBTQI people, you'd find that this is a regularly expressed concern.&lt;/p&gt;
&lt;p&gt;It may also be enlightening to read up about the biology of the marriage debate. &lt;a class="reference external" href="http://linuxmafia.com/faq/Essays/marriage.html"&gt;This essay&lt;/a&gt; was written by someone in the shadow of the &amp;quot;Proposition 8&amp;quot; debate in California; however, it deals entirely with the biological issues of &amp;quot;gay&amp;quot; marriage.&lt;/p&gt;
&lt;p&gt;The short version - legislating marriage as being &amp;quot;between a man and a woman&amp;quot; is actually a biologically impossibility, and could effectively &lt;em&gt;require&lt;/em&gt; relationships that most people would consider as &amp;quot;gay&amp;quot; marriage.&lt;/p&gt;
&lt;p&gt;I certainly hope the Liberal party will revisit this issue in the near future, and demonstrate some of the leadership that it purports to have.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="refugees"&gt;
&lt;h2&gt;Refugees&lt;/h2&gt;
&lt;p&gt;The second issue I wish to raise with you is your government's appalling policies on refugees and migrants. I am sick to the back teeth with the posturing of both the Government &lt;em&gt;and&lt;/em&gt; the Opposition, as the two parties struggle to see who can be a bigger bastard to people who are simply doing what comes naturally to every one of us - doing everything in their power to ensure the safety of their families.&lt;/p&gt;
&lt;p&gt;I am ashamed that Australia has detention camps such as the one on Manus Island. I am especially ashamed of a government that staffs these facilities with private contractors, and then does everything in its power to deny basic freedoms to those held there. And, to make matters worse, the government then change the laws to actively assist those private contractors to perpetrate abuse and prevent oversight, barring access to journalists.&lt;/p&gt;
&lt;p&gt;Let me be clear: I am not impressed by the machismo and posturing shown by &lt;em&gt;either&lt;/em&gt; party on this issue. The ratcheting of attacks on migrants, refugees and asylum seekers has been the undertone of multiple elections, and I am completely sick of it.&lt;/p&gt;
&lt;p&gt;I would like our government to show &lt;em&gt;any&lt;/em&gt; signs of compassion for fellow human beings who are suffering from extraordinary circumstances - many of which are of Australia's own making, as a result of our involvement in foreign theatres.&lt;/p&gt;
&lt;p&gt;However, this morning, news leaked of a truly astounding development - that the recently formed &amp;quot;Border Force&amp;quot; was going to run &amp;quot;Operation Fortitude&amp;quot; this weekend - in which, the police and Border Force agents would apparently be stopping people in Flinders Street Station in Melbourne to &lt;em&gt;check their papers&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As I write this email, &lt;a class="reference external" href="http://www.abc.net.au/news/2015-08-28/operation-fortitude-cancelled/6733008"&gt;it appears that &amp;quot;Operation Fortitude&amp;quot; has been cancelled&lt;/a&gt;. To which I say: good riddance. I am ashamed that anyone in this government ever thought this was a good idea. The idea that weekly &amp;quot;national security announceables&amp;quot; will somehow convince the electorate that the government is possessed of strong leadership is, frankly, insulting.&lt;/p&gt;
&lt;p&gt;The posturing of this government in an attempt to be &amp;quot;Strong on national security&amp;quot; does not impress me. I wasn't impressed by the grandstanding machismo of bullies in high school. I'm even less impressed when that grandstanding is being carried out by my political leaders - people who I would hope my children would look up to and admire.&lt;/p&gt;
&lt;p&gt;Given that both parties have taken these &amp;quot;Strong on national security&amp;quot; policies to several elections, with the only differentiator being how they planned to be cruel, I don't hold much hope that these policies will change any time soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="climate-change"&gt;
&lt;h2&gt;Climate change&lt;/h2&gt;
&lt;p&gt;Lastly, I would like to take your government to task over it's handling of clean energy and climate change. Mr Abbott's thinly veiled contempt for the issue of climate change is deeply concerning.&lt;/p&gt;
&lt;p&gt;I can accept that some moderation is required when tackling climate change; we can't completely shut down the economy over this issue.&lt;/p&gt;
&lt;p&gt;However, when a supposedly free-market loving government dismantles a marketplace scheme for carbon pricing, and then &lt;a class="reference external" href="http://www.abc.net.au/news/2015-07-13/pm-defends-decision-to-axe-wind-solar-from-cefc-spending/6615372"&gt;actively undermines the investment market in clean technologies&lt;/a&gt;, claiming that &lt;a class="reference external" href="http://www.abc.net.au/news/2015-06-11/abbott-wants-to-reduce-wind-farms-wishes-ret-never-implemented/6539164"&gt;wind turbines are &amp;quot;visually awful&amp;quot;&lt;/a&gt; (compared, I assume, to the visual splendour of an open pit coal mine and power station smoke stack), the position of the government is embarrassing.&lt;/p&gt;
&lt;p&gt;Again, I would like to see some genuine leadership from the government on this issue.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Before you write off my complaints as &amp;quot;left wing propaganda&amp;quot;. I consider myself a centrist.&lt;/p&gt;
&lt;p&gt;Consider this the cries of someone from the Menzies &amp;quot;forgotten people&amp;quot;. I don't expect that Liberal party policy will change overnight; but I hope that if enough people like myself express their concerns to you, we might see the ship we're on turn towards a more promising shore.&lt;/p&gt;
&lt;p&gt;However, I hope that if enough people express similar sentiments to you, you might be able to take those opinions to the party room and affect change from within.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Personal funding, and the culture of open source</title><link href="https://cecinestpasun.com/entries/personal-funding-and-culture-open-source/" rel="alternate"></link><updated>2012-07-05T15:10:00Z</updated><author><name></name></author><id>urn:uuid:76a7e9d9-89aa-36ea-b1d7-87506546add6</id><content type="html">&lt;p&gt;&lt;strong&gt;Update 1 Jan 2015&lt;/strong&gt; Following the decision by the Gittip (now Gratipay) community to &lt;a class="reference external" href="https://github.com/gratipay/inside.gratipay.com/issues/118"&gt;continue to support Neonazis and serial abusers&lt;/a&gt;, I am no longer subscribed to or recommend the use of the Gittip platform.&lt;/p&gt;
&lt;hr class="docutils" /&gt;
&lt;p&gt;Yesterday, Alex Gaynor posted a blog entry expressing his &lt;a class="reference external" href="http://alexgaynor.net/2012/jul/04/why-personal-funding/"&gt;views on personal funding&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I'm in complete agreement with Alex's premise (with the same this-is-potentially-self-serving caveat). The Open Source community has generated some of the best software in the world, and done so with a fraction of the financial resources of comparable proprietary and commercial efforts. There are many projects that would benefit from having full-time attention rather than the spare time that currently keeps them alive.&lt;/p&gt;
&lt;p&gt;However, the problem I see is that in order for something like &lt;a class="reference external" href="http://gittip.com"&gt;Gittip&lt;/a&gt; to really work, there needs to be a fairly significant cultural shift in our community - not just amongst those that write the code, but amongst those who consume it.&lt;/p&gt;
&lt;p&gt;Alex said that he didn't think anyone has a moral obligation to give back, but I disagree. If someone uses code I wrote and open sourced, they don't have a moral obligation to give back &lt;em&gt;to me&lt;/em&gt;, but in my opinion, they &lt;em&gt;do&lt;/em&gt; have a moral obligation to give back &lt;em&gt;to the community&lt;/em&gt; - to pay it forward, if you will. I don't care if they release their own code, answer questions on a mailing list, or triage bugs; I don't care if they're contributing to my project, or to someone else's entirely. With some notable exceptions (&lt;em&gt;cough*Alex*cough&lt;/em&gt;), a freshly minted graduate probably won't be able to make contributions that are as significant as an experienced veteran of the industry. And some people won't be as talented and productive as others. But, on aggregate, over a lifetime working in the industry, everyone should aspire to make contributions to the community that are equal in value to what they have taken from the community - and if they aren't able to give back in kind, giving back financially is one way to square the ledger.&lt;/p&gt;
&lt;p&gt;Unfortunately, my experience has been that most people gloss over the philosophical arguments in favour of open source, and focus instead on the price, viewing open source as a cheap way to fill a software stack. As a result, they don't see an open source community that has given to them and to which they should also contribute. My experience has been that if you don't &lt;em&gt;have&lt;/em&gt; to pay, the vast majority &lt;em&gt;won't&lt;/em&gt; pay. I've been lucky to work at &lt;a class="reference external" href="http://huntedmedia.com"&gt;one company&lt;/a&gt; that went to great lengths to give back to Open Source. However, I've also worked at a company, and spoken to representatives of others, that, when asked to donate to an Open Source project that they have used to generate hundreds of thousands of dollars in revenue, asked - with a straight face - &amp;quot;What's in it for us?&amp;quot;&lt;/p&gt;
&lt;p&gt;If you need any more proof of this, look at the experience of charity organisations. Unless you're dealing with a &amp;quot;cool&amp;quot; cause, or you come up with a good gimmick, generating donations on any sort of useful scale is hard graft. It's very easy to say Github has 1.7 million users, and if every one of them donated just $1 a week, we'd have $1.7 million to direct at open source development every week. However, it's another thing entirely to get 1.7 million people to &lt;em&gt;actually&lt;/em&gt; commit to that expense.&lt;/p&gt;
&lt;p&gt;But the whole personal funding approach won't work unless you can get a non-trivial proportion of those 1.7 million Github users to contribute financially. So for me, the real question is how to affect the social change that makes donation like this the rule, not the exception. Unless there's a plan for how to get to there from here, my concern is that &lt;a class="reference external" href="http://gittip.com"&gt;Gittip&lt;/a&gt; won't move beyond a well-intentioned, but small-scale experiment.&lt;/p&gt;
&lt;p&gt;Unfortunately, the only options I can think of involve changing the very dynamics that have made open source successful in the first place. Any attempt to punish people who aren't donors will only serve to drive them away from considering open source as an option in the first place. Given that we're starting from a position where money is the scarce resource, we don't really have any rewards that can be offered, other than the warm sensation of knowing that you've contributed. On top of that, anything with a financial component will be disproportionally onerous to students, or anyone in a developing economy.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://gittip.com"&gt;Gittip&lt;/a&gt; has certainly got a discussion going. I'm very happy that the discussion is happening, and I'm eager to see where it leads. However, I'd like to think that we can do better than just hoping and praying that this week's &amp;quot;beer money&amp;quot;-level donations grow organically until they're &amp;quot;rent money&amp;quot;. If personal funding really is the way to drive the development of open source work - and I certainly hope it is - we're going to need a better plan than that.&lt;/p&gt;
</content></entry><entry><title>I can haz a question (or five)?</title><link href="https://cecinestpasun.com/entries/i-can-haz-a-question-or-five/" rel="alternate"></link><updated>2010-06-27T12:58:44Z</updated><author><name></name></author><id>urn:uuid:ea43b5c9-55f0-3161-be43-5c83d5e88dbd</id><content type="html">&lt;p&gt;So... people have noticed that I have this habit at conferences.&lt;/p&gt;
&lt;p&gt;It's been &lt;a class="reference external" href="http://djangocaptions.com/post/647587573"&gt;lampooned&lt;/a&gt; and &lt;a class="reference external" href="http://twitter.com/mpesce/status/17074185084"&gt;questioned online&lt;/a&gt;; I've also been asked about it in person.&lt;/p&gt;
&lt;p&gt;I ask questions. A lot of questions. More often than not, I ask the first question at every talk I attend.&lt;/p&gt;
&lt;p&gt;And people think it's weird.&lt;/p&gt;
&lt;p&gt;However, there is method in my madness.&lt;/p&gt;
&lt;p&gt;Back in the day, I was a Physics undergrad student who migrated to the Computer Science department to do my Honours degree. To make some use of my undergrad qualifications, my Honours thesis was revolved around a computational physics problem. Although my thesis topic was strictly computer science, it wasn't one of the research foci of the department.&lt;/p&gt;
&lt;p&gt;Half way through the year, Honours students were required to give a presentation to the faculty describing their work and their progress. The presentation was assessed, and formed a major part of the mid-term mark for the course. A component of the mark for that assessment (I think it was 10%) was allocated to how well the student answered questions.&lt;/p&gt;
&lt;p&gt;So, I diligently gave my presentation, describing the problem I was addressing, and how I was going to address it. My slides all worked, and I hit my time allocation. Everything went reasonably well -- or at least I thought so.&lt;/p&gt;
&lt;p&gt;Time for questions ... and the sound of crickets. Nobody asked anything.&lt;/p&gt;
&lt;p&gt;I didn't know what to make of that. Was my presentation so awesome that nobody could think of anything to ask? Was it so bad that nobody understood it? Did I pitch it at completely the wrong level?&lt;/p&gt;
&lt;p&gt;To make matters worse -- because I didn't answer any questions, I received no marks for that component of the assessment. After all, I didn't answer a question, so they couldn't assess how well I handled questions.&lt;/p&gt;
&lt;p&gt;After that day, I made a resolution. Unless there's a pressing reason like a schedule overrun, nobody gets out of a room that I am in without getting at least one topical question.&lt;/p&gt;
&lt;p&gt;It takes a lot of work to write a presentation, and a lot of practice and confidence to do them well. There may not be school marks on the line at professional conferences, but it's no less demoralising to realise that your hours of effort spent crafting your presentation haven't been able to stimulate any interest in an audience. The only worse feeling is to be presenting to a empty room.&lt;/p&gt;
&lt;p&gt;During most talks, that means I'm actively sitting there trying to work out what question I'm going to ask. When the floor opens for questions, I will take a look around to see if anybody is making a move for the microphone. If it looks like nobody is going to ask a question, I get up and ask my prepared question. If someone actually does run to the microphone, I won't try and beat them (unless I have a question that I &lt;em&gt;really&lt;/em&gt; want to ask). It's not that &lt;em&gt;I&lt;/em&gt; need to ask a question -- I'm happy as long as &lt;em&gt;someone&lt;/em&gt; asks a question.&lt;/p&gt;
&lt;p&gt;The interesting side effect is that once I have asked my question and the speaker has responded, there is often a line behind me. The time it takes for people to digest a talk and compose an interesting question is often longer than the time a session chair is willing to wait for that question to emerge.&lt;/p&gt;
&lt;p&gt;So -- that's why I'm such a regular fixture at conference microphones. Personally, I think this is a job that should be considered part of the role of an good session chair; if a room doesn't provide an initial question, don't just shut down the floor. Provide the breathing space that allows the room can consider what it is they want to know.&lt;/p&gt;
&lt;p&gt;However, until such time as session chairs start doing this regularly, you can expect to see me at the microphone, being &amp;quot;that guy&amp;quot;.&lt;/p&gt;
</content></entry><entry><title>An end to my Evolution</title><link href="https://cecinestpasun.com/entries/end-my-evolution/" rel="alternate"></link><updated>2010-04-12T14:46:24Z</updated><author><name></name></author><id>urn:uuid:7a2d402d-a8aa-31cb-9b3b-3e02f402aa4f</id><content type="html">&lt;p&gt;I am stepping down as a maintainer of one of my open source projects - &lt;a class="reference external" href="http://code.google.com/p/django-evolution"&gt;Django Evolution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This shouldn't come as a surprise to anyone - there hasn't been any significant development work done on Evolution in over a year. My personal commitments and my work on &lt;a class="reference external" href="http://djangoproject.com/"&gt;Django core&lt;/a&gt; are absorbing all my free time at present. As a result, I can't give Evolution the attention it needs or deserves, especially given the changes that will be required to update Evolution to work with Django 1.2.&lt;/p&gt;
&lt;p&gt;For me, Evolution was always a bit of an experiment. The documentation has always warned that Evolution was not production ready, and the bug tracker would back up that assessment. My aim with Evolution was to demonstrate that a semi-automated migration framework was possible, and to hopefully kickstart a development effort that would ultimately lead to a merge into Django's trunk.&lt;/p&gt;
&lt;p&gt;In a way, this &lt;em&gt;has&lt;/em&gt; happened, just not in the way I intended. Following the release of Evolution, other schema migration projects have been announced -- most notably, &lt;a class="reference external" href="http://south.aeracode.org/"&gt;South&lt;/a&gt; -- and these project provide alternate approaches to the schema migration problem. Some of these projects have been successful, some have not; some have adapted ideas similar to those used by Evolution, some have taken alternative approaches.&lt;/p&gt;
&lt;p&gt;I'm disappointed that Evolution didn't meet all of my original goals, but I'm happy that the community has developed a bunch of solutions to the schema migration problem. A big thank you to everyone that helped out along the way -- especially Ben Khoo, who started the project with me; Christian Hammond, who joined as a co-developer later in the project; and anyone that took the time to report a bug, write up a patch, or contribute on the mailing list.&lt;/p&gt;
&lt;p&gt;Looking forward, I'm sure that the core Django project will look at this problem at some point in the future. I don't know what that will look like (although I have some ideas), but I'm looking forward to working with the community to provide a great framework that integrates the best that the community has to offer.&lt;/p&gt;
&lt;p&gt;In the meantime, Christian Hammond will be maintaining Django Evolution. Christian has a vested interest in Evolution surviving -- he uses it in &lt;a class="reference external" href="http://www.reviewboard.org/"&gt;Review Board&lt;/a&gt;. I wish him all the best.&lt;/p&gt;
</content></entry><entry><title>Getting hgsubversion to work under OSX</title><link href="https://cecinestpasun.com/entries/getting-hgsubversion-work-under-osx/" rel="alternate"></link><updated>2009-08-15T16:33:26Z</updated><author><name></name></author><id>urn:uuid:8c5e8166-ddef-3cc9-8e0f-855b8e537f4d</id><content type="html">&lt;p&gt;I've been using git as a DVCS for about a year. One of the big selling points for git has been git-svn - a compatibility layer between Subversion repositories and the git client. This means you can continue to use your old SVN repository to store your code, but interact with it using a modern DVCS tool that allows for local (and offline) commits, local branches, etc.&lt;/p&gt;
&lt;p&gt;This has been an absolute godsend for my work with Django. Local commits, local branches, and git-stash have all become an indispensable part of my daily routine.&lt;/p&gt;
&lt;p&gt;However, git isn't the only DVCS. Of late, I've been experimenting with Mercurial. Mercurial doesn't ship with a direct equivalent of git-svn, but it does have a very robust plugin framework. One of the plugins that is available is &lt;a class="reference external" href="http://www.bitbucket.org/durin42/hgsubversion/wiki/Home"&gt;hgsubversion&lt;/a&gt; - a plugin that lets you treat a Subversion repository as if it were a public Mercurial repository.&lt;/p&gt;
&lt;p&gt;Almost a year ago, Ben Collins-Sussman &lt;a class="reference external" href="http://blog.red-bean.com/sussman/?p=116"&gt;wrote a document&lt;/a&gt; describing how to get hgsubversion working. However, that document appears to refer to an older version of hgsubversion, as some of the commands no longer appear relevant. It's also a more generic Unix tutorial, so it tends towards &amp;quot;compile the sources&amp;quot; as a solution for dependencies. When you have a stable binary platform like OSX, there is usually an easier way.&lt;/p&gt;
&lt;p&gt;For the benefit of my own memory later on, and for the benefit of anyone else in the same boat, here's an updated set of instructions, slightly tuned for OSX. The basic procedure should work for any other operating system, but you'll need to work out how to adapt the instructions for your local conditions.&lt;/p&gt;
&lt;div class="section" id="install-mercurial"&gt;
&lt;h2&gt;Install Mercurial&lt;/h2&gt;
&lt;p&gt;First, Install Mercurial. You need to have version 1.3 or greater. The default OSX installer works fine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-subversion"&gt;
&lt;h2&gt;Install Subversion&lt;/h2&gt;
&lt;p&gt;hgsubversion requires the binding API from Subversion 1.5 or greater. CollabNet &lt;a class="reference external" href="http://www.open.collab.net/downloads/community/"&gt;publishes an OSX installer for Subversion&lt;/a&gt; that won't collide with the system version. Download and install this package. It will install Subversion 1.5 into &lt;cite&gt;/opt/subversion&lt;/cite&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-the-shell-environment"&gt;
&lt;h2&gt;Configure the shell environment&lt;/h2&gt;
&lt;p&gt;In order for hgsubversion to know about the non-standard Subversion install, you need to configure the shell environment to point at the new version. Set the following environment variables so that hgsubversion can find the Subversion 1.5 bindings:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ export DYLD_LIBRARY_PATH=/opt/subversion/lib:$DYLD_LIBRARY_PATH
$ export PYTHONPATH=/opt/subversion/lib/svn-python:$PYTHONPATH
&lt;/pre&gt;
&lt;p&gt;You can set these in a normal shell session, or, if you intend to make this a permanent arrangement, you can add these lines to &lt;cite&gt;~/.bash_profile&lt;/cite&gt;. If you take the &lt;cite&gt;.bash_profile&lt;/cite&gt; option, you would also be well advised to set the &lt;cite&gt;PATH&lt;/cite&gt; so that the right subversion binary is available:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ export PATH=/opt/subversion/bin:$PATH
&lt;/pre&gt;
&lt;p&gt;To check that this has worked, run the following at a shell prompt:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ python -c &amp;quot;import svn.core; print svn.core.SVN_VER_MINOR&amp;quot;
&lt;/pre&gt;
&lt;p&gt;You should get a response of &lt;cite&gt;5&lt;/cite&gt; or &lt;cite&gt;6&lt;/cite&gt;. If you get &lt;cite&gt;4&lt;/cite&gt;, you're still using the default 1.4 install of Subversion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="install-hgsubversion"&gt;
&lt;h2&gt;Install hgsubversion&lt;/h2&gt;
&lt;p&gt;hgsubversion is available as a Mercurial checkout. I put my tool checkouts into &lt;tt class="docutils literal"&gt;~/tools&lt;/tt&gt;; any other location will do (provided you adapt the later instructions):&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ cd tools
$ hg clone http://bitbucket.org/durin42/hgsubversion
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="configure-hgsubversion"&gt;
&lt;h2&gt;Configure hgsubversion&lt;/h2&gt;
&lt;p&gt;To enable the hgsubversion plugin, edit your &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.hgrc&lt;/span&gt;&lt;/tt&gt; file and add the following lines to the &lt;tt class="docutils literal"&gt;[extensions]&lt;/tt&gt; section:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
rebase=
svn=/Users/rkm/tools/hgsubversion/hgsubversion
&lt;/pre&gt;
&lt;p&gt;Substitute your own home directory for &lt;tt class="docutils literal"&gt;/Users/rkm&lt;/tt&gt;; if you used a directory other that &lt;tt class="docutils literal"&gt;~/tools&lt;/tt&gt;, modify as appropriate. The important thing to note is that you're not referencing the hgsubversion directory that you cloned - you're referencing the hgsubversion directory &lt;em&gt;inside&lt;/em&gt; the directory that you cloned.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="clone-your-svn-repository"&gt;
&lt;h2&gt;Clone your SVN repository&lt;/h2&gt;
&lt;p&gt;Now you can clone your repository. For example, a public HTTP repository for a Google Code project could be cloned using:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ hg clone svn+http://&amp;lt;project-name&amp;gt;.googlecode.com/svn project
&lt;/pre&gt;
&lt;p&gt;This will make a clone of the repository into a directory named &lt;tt class="docutils literal"&gt;project&lt;/tt&gt;. Note that the checkout &lt;em&gt;doesn't&lt;/em&gt; contain the &lt;tt class="docutils literal"&gt;trunk&lt;/tt&gt; part of the repository URL.&lt;/p&gt;
&lt;p&gt;You can also clone a password-protected repository. Again, using Google Code as an example:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ hg clone svn+https://&amp;lt;project-name&amp;gt;.googlecode.com/svn project
&lt;/pre&gt;
&lt;p&gt;It's important to note the use of &lt;tt class="docutils literal"&gt;svn+https&lt;/tt&gt;. If you leave off the &lt;tt class="docutils literal"&gt;svn+&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ hg clone https://&amp;lt;project-name&amp;gt;.googlecode.com/svn project
&lt;/pre&gt;
&lt;p&gt;This will still work - however,  hgsubversion won't retain your HTTP credentials, so you'll need to re-enter them multiple times every time you pull or push updates.&lt;/p&gt;
&lt;p&gt;The cloning process will create a complete clone of every commit, every branch, and every tag, so this can take a while. If the clone is interrupted at any point (say, due to a network outage), you can resume the update with a simple &lt;tt class="docutils literal"&gt;hg pull&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-your-repository"&gt;
&lt;h2&gt;Use your repository&lt;/h2&gt;
&lt;p&gt;Now you can use your repository. After editing some source files, you can commit, then push your changes:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ hg commit
$ hg push
&lt;/pre&gt;
&lt;p&gt;This push will turn into a full subversion commit with the same commit message you gave to Mercurial. To retrieve repository updates:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ hg pull
$ hg update
&lt;/pre&gt;
&lt;p&gt;or, if you have the fetch extension installed:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
$ hg fetch
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="caveats"&gt;
&lt;h2&gt;Caveats&lt;/h2&gt;
&lt;p&gt;The one notable limitation of hgsubversion is that requires that your subversion repository follow the basic convention of having the root directories &lt;tt class="docutils literal"&gt;/trunk&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;/branches&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;/tags&lt;/tt&gt;. However, structure inside those directories doesn't appear to matter (at least, a lot less than it matters with git-svn).&lt;/p&gt;
&lt;p&gt;For example, I was able to clone the complete Django repository. The repository contains represents SVN trunk as the &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; branch, and creates internal branches for each of the branches for each, and ended up with a repository where &lt;tt class="docutils literal"&gt;trunk&lt;/tt&gt; is the &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; branch, and each of the SVN branches are represented in the clone:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
kronkite:django rkm$ hg branches
0.96-bugfixes              11237:04a273c619a1
soc2009/model-validation   11236:da7d967cd1d3
soc2009/i18n-improvements  11231:12da37d23998
soc2009/admin-ui           11230:72ecf612cdcb
soc2009/multidb            11228:b6a31d61ba90
default                    11225:a8c596f1915f
soc2009/test-improvements  11187:d8486ecb2e9f
releases/1.0.X             11184:f4d145484767
...
&lt;/pre&gt;
&lt;p&gt;SVN Tags are also imported:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
kronkite:django rkm$ hg tags
tip                            11237:04a273c619a1
releases/1.1                   11168:019f09dd0f74
releases/1.0.3                 11163:d24312cdc2ad
releases/0.96.4                11159:0d3dd0109d2c
releases/1.0.2                  9313:11a6391f263e
...
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So there you have it. I used git for the life of the v1.1 branch of Django. Now that I have a viable SVN clone in Mercurial, I'm aiming to use Mercurial for my work on the v1.2 branch. We'll have to wait and see which one wins out for v1.3.&lt;/p&gt;
&lt;p&gt;If you have any comments or corrections to these notes, let me know &lt;a class="reference external" href="mailto:russell&amp;#64;keith-magee.com"&gt;via email&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Updated 10:25PM 15 August 2009: corrected the clone examples and explanation of ``svn+``&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>Even better than I thought</title><link href="https://cecinestpasun.com/entries/even-better-i-thought/" rel="alternate"></link><updated>2009-07-08T13:35:06Z</updated><author><name></name></author><id>urn:uuid:54c40216-df11-3aff-835b-9f2733d61c2a</id><content type="html">&lt;p&gt;Yesterday, I blogged about &lt;a class="reference external" href="http://cecinestpasun.com/entries/doing-right-thing/"&gt;a positive experience I had with Packt Publishing's relationship with Open Source projects&lt;/a&gt;. In that blog entry, I called on companies, including Packt, to give more back to the communities that produce Open Source, including financial contribution where possible.&lt;/p&gt;
&lt;p&gt;It has since been drawn to my attention that Packt already contributes financially to the Django Foundation, as well as other Open Source projects. &lt;a class="reference external" href="http://authors.packtpub.com/content/open-source-royalties"&gt;Packt pays a royalty back to projects when they sell books on an Open Source topic&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Packt - I salute you again for this excellent policy, and I apologize for the error on my part.&lt;/p&gt;
&lt;p&gt;My broader comment still stands: there are many companies that derive profit from open source, but give little if anything back to the projects from which they derive that profit. To those companies - I strongly encourage you to follow the example of Packt.&lt;/p&gt;
</content></entry><entry><title>Oh yeah... I should probably mention...</title><link href="https://cecinestpasun.com/entries/oh-yeah-i-should-probably-mention/" rel="alternate"></link><updated>2009-07-07T12:08:55Z</updated><author><name></name></author><id>urn:uuid:3b29f509-75c7-3800-815b-4f2a87e00539</id><content type="html">&lt;p&gt;In publishing my most recent blog entry, it occurred to me that I never actually got around to blogging about the fact that on June 19, my wife gave birth to a beautiful baby girl. I twittered, emailed, photographed, and phoned in just about every way possible... but forgot to blog about it.&lt;/p&gt;
&lt;p&gt;So - At 11:23AM on June 19, Beatrix Ruth Lorraine Keith-Magee was brought into the world by caesarian section. She was a happy and healthy 3.2kg, and scored 9 on her Apgar test.&lt;/p&gt;
&lt;p&gt;After some initial feeding problems, she has settled in nicely to a rhythm. Her brother Tobias is enraptured, as is her mother and father.&lt;/p&gt;
</content></entry><entry><title>Doing the right thing</title><link href="https://cecinestpasun.com/entries/doing-right-thing/" rel="alternate"></link><updated>2009-07-07T12:06:12Z</updated><author><name></name></author><id>urn:uuid:a9d6c88a-7e46-3964-8f28-f12bca8f1a93</id><content type="html">&lt;p&gt;My life has been fairly busy of late. My daughter was born on June 19; Django v1.1 is almost out the door; and we have lots of &lt;a class="reference external" href="http://wotnews.com.au"&gt;interesting&lt;/a&gt; &lt;a class="reference external" href="http://wotnews.com"&gt;stuff&lt;/a&gt; &lt;a class="reference external" href="http://wotnews.co.uk"&gt;underway&lt;/a&gt; at &lt;a class="reference external" href="http://wearehunted.com"&gt;work&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, when &lt;a class="reference external" href="http://www.packtpub.com/"&gt;Packt Publishing&lt;/a&gt; contacted me asking if I would like to review their recently released book, I declined. I barely have enough time to read books at the moment, let alone review them.&lt;/p&gt;
&lt;p&gt;However, I asked if I could have a complimentary copy anyway. After all - I am a Django core developer, and if I (and many other people) hadn't volunteered my time to develop Django, Packt wouldn't have a topic to publish a book about.&lt;/p&gt;
&lt;p&gt;To my surprise, they agreed. Sitting on my hard disk is a freshly downloaded copy of &lt;a class="reference external" href="http://www.packtpub.com/django-1.0-template-design-practical-guide/book"&gt;&amp;quot;Django 1.0 Template Development&amp;quot;, by Scott Newman&lt;/a&gt;. If Django template development sounds like something you might be interested in knowing more about, and you want to know more about this book, a &lt;a class="reference external" href="http://www.packtpub.com/files/django-1-0-template-development-sample-chapter-6-serving-multiple-template"&gt;sample chapter is available&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I find this kind of attitude encouraging. It would have been very easy to dismiss my request, but Packt took the opportunity to give a little something back to the community that enables them to derive financial benefit. In this case, it quite literally costs them nothing: it's an e-book, so there's no physical costs; I'm hardly the target audience, so this doesn't represent a lost sale opportunity. However, the gesture does gain Packt a lot of goodwill in my eyes.&lt;/p&gt;
&lt;p&gt;Personally, I would like this sort of thing to become commonplace, rather than the exception. Donating five or ten books out of a print run to the core developers that maintain a project would hardly be a big expense for a major publisher, but it would mean a lot to the people (such as myself) that volunteer countless hours of their own time to manage and maintain open source projects.&lt;/p&gt;
&lt;p&gt;Packt Publishing - I salute you. However, I also encourage you to make this a broader policy, not just a once-off offer to someone who took a chance by asking when approached. I call on other publishers to follow the example of Packt in this instance.&lt;/p&gt;
&lt;p&gt;Of course, it need not stop at donated books, either. Financial or other contributions to fundraising foundations (such as the &lt;a class="reference external" href="http://djangoproject.com/foundation"&gt;Django Foundation&lt;/a&gt; would also be most welcome. I appreciate that this is a much harder sell, as it involves talking about real money. However, the issue runs deeper than an accounting line item.&lt;/p&gt;
&lt;p&gt;As with many discussions about rights (be they human rights or intellectual property rights), the parallel issue of responsibilities is often overlooked. Yes, every human has certain inalienable rights - but those rights come with the responsibility of participating and contributing to their culture as a whole. This principle of responsibility was sufficiently important that it was enshrined as &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Universal_Declaration_of_Human_Rights"&gt;Section 29.1 of the Universal Declaration on Human Rights&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Similarly, while Open Source software comes with the right of free (as in beer and as in speech) use and redistribution, there is a responsibility to give back. For the individual, this can mean contributing help on a mailing list or IRC channel, or contributing patches. For corporations, this can be as simple as allowing employees to use company time to contribute to projects. Financial and in-kind contributions are another option. When the business model of a company is entirely based on leveraging open source products - such as publishing companies with an Open Source focus, or service companies that use Open Source exclusively - I believe there is a strong moral imperative to contribute in a meaningful and substantive way back to the communities that make their companies possible.&lt;/p&gt;
&lt;p&gt;Packt has made one small step down this road. I'm proud to say that &lt;a class="reference external" href="http://wotnews.com.au"&gt;Wotnews&lt;/a&gt;, the company where I hang my shingle, is a company that has not only started down the road, but is now getting Frequent Flyer points for their travels. Right now, I'm in the process of organizing travel to &lt;a class="reference external" href="http://djangocon.org"&gt;DjangoCon09&lt;/a&gt;, and Wotnews has offered - for the second year in a row - to pick up the tab for my flight and conference expenses. Given that I'm based in Perth, and the conference is in Portland, this is a substantial contribution.&lt;/p&gt;
&lt;p&gt;Stephen Phillips and Richard Slatter (Founder and General Manager, respectively, of Wotnews) were under no obligation to contribute in this way - or in any other way, for that matter - but they have taken the opportunity to give something back to the community that has provided the foundation for their own company. As a result, DjangoCon09 will benefit from having a core developer in attendance that wouldn't otherwise be able to make it.&lt;/p&gt;
&lt;p&gt;The gesture is also deeply appreciated on a personal level. It's difficult to measure the depths of my gratitude to Stephen and Richard for running a company they way they do. Not only have they built a great team and work environment, but they fully acknowledge their responsibility to give back to the open source projects like Django that contribute to the success of Wotnews. I can only hope that if I am ever in a comparable position, I live up to the example that they have established in Wotnews.&lt;/p&gt;
</content></entry><entry><title>This Week in Django</title><link href="https://cecinestpasun.com/entries/week-django/" rel="alternate"></link><updated>2008-11-14T11:35:04Z</updated><author><name></name></author><id>urn:uuid:b935925c-3c47-3de3-a794-e753088022de</id><content type="html">&lt;p&gt;This week, I was a guest on &lt;a class="reference external" href="http://thisweekindjango.com/twid/episode/44/this-week-in-django-44/"&gt;This Week in Django&lt;/a&gt;, a great podcast that tracks the weekly activities of the Django community. The audio has just been posted and made available through iTunes.&lt;/p&gt;
&lt;p&gt;I had a great time doing the show, shooting the breeze about my history and contributions to Django, my plans for the future. It ran fairly long - 2 hours in the recording, 1:40 after editing - but I'm happy with the result. We covered a lot of ground, and after listening to the recording I'm not completely embarrassed by anything I said (although I really do need to get a better microphone and a less noisy chair).&lt;/p&gt;
&lt;p&gt;As an added bonus, Michael spliced in a piece of post-interview discussion where I give a pretty good clue as to the origin of the numbers in my handle. In related news, I now have the honor of being the first guest on the show to give TWiD an explicit tag.&lt;/p&gt;
</content></entry><entry><title>What! No comments?</title><link href="https://cecinestpasun.com/entries/what-no-comments/" rel="alternate"></link><updated>2008-11-05T13:12:33Z</updated><author><name></name></author><id>urn:uuid:ccf6483b-77db-3b34-8db5-befa02e825f3</id><content type="html">&lt;p&gt;One interesting (and potentially controversial) feature of this blog is that there is no comment interface. What, you say! No comments! Sacrilege! Doesn't Russell understand the wisdom of the crowd? Is he so pig headed that he thinks he is always right and can't stomach dissent? Is he censoring debate?  What is he afraid of?&lt;/p&gt;
&lt;p&gt;The real reason is this: when it comes to blog comments, I'm of the same mind as &lt;a class="reference external" href="http://www.scripting.com/2007/01/01.html#theUneditedVoiceOfAPerson"&gt;Dave Winer&lt;/a&gt; and &lt;a class="reference external" href="http://www.joelonsoftware.com/items/2007/07/20.html"&gt;Joel Spolsky&lt;/a&gt;: I don't believe blog comments enhance the process of online discussion. Messrs Winer and Spolsky raise valid points in their respective discussions, but I have some additional reasons for disliking comments.&lt;/p&gt;
&lt;div class="section" id="rhetoric-and-dialectic"&gt;
&lt;h2&gt;Rhetoric and Dialectic&lt;/h2&gt;
&lt;p&gt;While an individual blog is an excellent forum for &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Rhetoric"&gt;rhetoric&lt;/a&gt;, it is not a good way to develop a &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Dialectic"&gt;dialectic&lt;/a&gt;. In the classical sense, Rhetoric is the art of persuasion by a single speaker. Dialectic, on the other hand, is the process of exchanging arguments and counterarguments, the outcome of which is a refutation of one of the points of view, or the synthesis of a new point of view representing the best parts of the two arguments.&lt;/p&gt;
&lt;p&gt;Blogs are clearly an effective forum for rhetoric. Using a blog, a blogger can take as much time as necessary to  compose a compelling argument; anyone is free to read any blog they choose, and particularly compelling blog entries will soon find themselves linked to by others. If a blogger says something interesting or compelling in a blog entry, others will link to that entry, and many people will read the argument.&lt;/p&gt;
&lt;p&gt;However, in order to have an effective dialectic, both speakers need parity in their speaking platform. On a blog with comments, the blogger and the commenter do not have this parity. Although you could theoretically write a multi-page blog comment, in practice, this isn't what happens. The format of blog comments encourages (and almost requires) short form responses, rapidly delivered. Those that take their time to compose a suitable comment response will find themselves a long way down a list of shorter responses, and if you take too long to compose a response, you may find that comments on the blog have been closed by the blog owner.&lt;/p&gt;
&lt;p&gt;So how do you give both speakers parity? You give them both the same tools. Rather than trying to force one half of an argument into a comment box, you provide a way for both speakers to take the time to consider their responses. The dialectic evolves over time, in successive blog posts on different blogs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="community-fragmentation"&gt;
&lt;h2&gt;Community fragmentation&lt;/h2&gt;
&lt;p&gt;A dialectic doesn't have to be confined to blogs - any forum where speakers have parity of position can yield a dialectic. For example, every non-trivial open source project will have some sort of forum for discussing the development of the project itself. In the Django community, this is the &lt;a class="reference external" href="http://groups.google.com/group/django-developers"&gt;django-developers&lt;/a&gt; mailing list.&lt;/p&gt;
&lt;p&gt;A community around a project will usually contain a large number of bloggers. This community of blogs can provide an invaluable resource for individuals to explore ideas, discuss issues of relevance, and exchange helpful tips. However, each blog will only attract a subset of the entire community. There is only one point in the community that it is reasonable to assume that every community member will read - the central community forum.&lt;/p&gt;
&lt;p&gt;When a blog carries comments, discussions will inevitably evolve around the subset of the community of that blog. Unfortunately, this can give the illusion that a vibrant and representative discussion is taking place, when in reality, only a small subset of the entire community is even aware that the discussion is taking place. Slowly, the community fragments into groups, none of whom are necessarily even aware that others exist. This fragmentation can be extremely destructive for a community.&lt;/p&gt;
&lt;p&gt;If you remove blog comments from the equation, this problem becomes significantly reduced. In the absence of comments, it is a lot harder for a community subset to develop. The central point of discussion for the community remains where it should be - in the central community forum.&lt;/p&gt;
&lt;p&gt;It takes a lot of effort to build a community, and to build a discussion resource with the critical mass necessary to make it self-sustaining. I don't have the time or inclination to build a community around this blog - especially when I have already spent so much time helping to develop a community around Django. I'm happy to post my opinions and tips on my blog, but I will continue to have Django design discussions in the appropriate forum - the django-developers mailing list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sturgeon-s-law"&gt;
&lt;h2&gt;Sturgeon's Law&lt;/h2&gt;
&lt;p&gt;I'm a firm believer in &lt;em&gt;Sturgeon's Law&lt;/em&gt; - 99% of everything is crap. Blog comments are certainly no exception. Things are made worse by the fact in that the world of blog comments, Sturgeon's Law has a very important corollary: &lt;a class="reference external" href="http://www.penny-arcade.com/comic/2004/03/19/"&gt;John Gabriel's Internet F*ckwad theory&lt;/a&gt;. Frankly, I don't have enough time in my day as it is without having to spend it deleting spam, and wading through &amp;quot;Django iz teh suxx0r&amp;quot; comments to find a nugget of wisdom.&lt;/p&gt;
&lt;p&gt;Forcing people to post responses in their own blogs has three effects:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;It raises the bar to entry by just a little bit. Any old moron can poke a comment in a comment box (and if the general level of internet discourse is any indication, morons do this with alarming regularity). By forcing comments into blogs, it means you have to be have to be smart enough to work out how to get a blog from any one of the dozen free blog hosting services on the internet. This isn't a huge barrier, but it's enough to stave off one particular class of ignorant obnoxious trolls.&lt;/li&gt;
&lt;li&gt;It serves as a mild encouragement to say something interesting. If you're just commenting on a blog, it's easy to get away with &amp;quot;Me Too!!!111!!!!&amp;quot; as a comment, but if you have to go to the trouble of writing a publishing a blog entry on your own blog, you are more likely to go to the trouble of add a comment - even if only a brief one. I'm not interested in listening to an echo chamber - I want to hear real discussion and real debate.&lt;/li&gt;
&lt;li&gt;I'm a big believer in personal attribution. If you have something to say, you should be able to say it - but you should also be responsible for what you have said. Anonymity can be important - if you're whistleblowing on government corruption, for example - but in general internet discourse it simply isn't required. People say all sorts of things on the internet that they wouldn't say in person under the guise of an anonymous login. On the other hand, people are generally proud of their blogs and homepages. By forcing people to closely associate their identity with their words, I believe it is possible to force people to think twice before posting something flagrantly inflammatory.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I've been a citizen of the web for almost 15 years now. My position on blog comments is not theoretical or abstract - it's based on what have seen and absorbed over the years, and the places where I have found the most value. If you disagree, I ask that you ask yourself this one question: If every blog comment that has ever been written were to disappear tomorrow, would the world lose an important intellectual resource? I, for one, don't think they would be particularly missed.&lt;/p&gt;
&lt;p&gt;Do you disagree with me? Then blog about it! I look forward to the dialectic.&lt;/p&gt;
&lt;/div&gt;
</content></entry><entry><title>EzyDVD store passwords in the clear</title><link href="https://cecinestpasun.com/entries/ezydvd-store-passwords-clear/" rel="alternate"></link><updated>2008-10-24T10:06:01Z</updated><author><name></name></author><id>urn:uuid:e8f8cfb6-4d05-3594-9386-afaa38e8262c</id><content type="html">&lt;p&gt;I've been a customer of &lt;a class="reference external" href="http://ezydvd.com.au"&gt;EzyDVD&lt;/a&gt; for some time. They were one of the first players in Australia to take e-commerce seriously; I like their no-fuss website, and their customer service has always been very good.&lt;/p&gt;
&lt;p&gt;However, I had a somewhat alarming experience recently. I had a problem with an order that I placed, so I emailed their customer service line. I didn't hear back from them, so I called their customer service line. The helpful lass on the other end of the phone solved my problem quickly.... but in the process was able to tell me my account password.&lt;/p&gt;
&lt;p&gt;You don't have to be in this industry for long to know that &lt;a class="reference external" href="http://blog.moertel.com/articles/2006/12/15/never-store-passwords-in-a-database"&gt;storing passwords in clear-text is a bad idea&lt;/a&gt;. I've taken this up with their webmaster, but I haven't heard back yet. In the meantime - any readers that use EzyDVD - be warned.&lt;/p&gt;
</content></entry><entry><title>freakboy3742</title><link href="https://cecinestpasun.com/entries/freakboy3742/" rel="alternate"></link><updated>2008-10-21T10:59:00Z</updated><author><name></name></author><id>urn:uuid:abbb249f-dc16-31a9-a18c-7472dd596544</id><content type="html">&lt;p&gt;Once upon a time, I was an undergraduate at Curtin University of Technology. As a way of earning some extra cash, I worked as a tutor for the School of Computing. One of the subjects I taught was was &amp;quot;Information Technology 111&amp;quot; (otherwise known as IT111), an introductory &amp;quot;how to find the On switch&amp;quot; course.&lt;/p&gt;
&lt;p&gt;IT111 was a compulsory course for Chemistry students, and for some reason, I ended up with a tutorial class that had a disproportionate number of female students... many of whom were quite familiar with the 'giggle and bat eyelids' school of eliciting help from male tutors.&lt;/p&gt;
&lt;p&gt;One afternoon, I was teaching in one lab, while some of my eyelid-prone female students were working on an assignment in a different lab. They were quietly discussing a problem they were having, when one of them
said quite loudly &amp;quot;Oh, I don't know - why don't you go ask Freakboy?&amp;quot;. Then two of them stood up, walked down the corridor, and into my lab.&lt;/p&gt;
&lt;p&gt;How do I know this? One of my friends was sitting in the lab with them, and saw them walk down the corridor and into the lab where I was teaching. The name stuck, and the rest is history.&lt;/p&gt;
&lt;p&gt;As for the 3742 - &lt;em&gt;freakboy&lt;/em&gt; is a surprisingly common handle, so the &lt;em&gt;3742&lt;/em&gt; is a way to make freakboy unique. The numbers themselves are drawn from one piece of geek culture, and one piece of cult film. I'll leave it as an exercise to the reader to work out the references.&lt;/p&gt;
</content></entry><entry><title>Yet Another Blog Engine</title><link href="https://cecinestpasun.com/entries/yet-another-blog-engine/" rel="alternate"></link><updated>2008-10-13T13:19:28Z</updated><author><name></name></author><id>urn:uuid:90cc5ba8-886a-36b0-8ca6-4f0b3730f3e7</id><content type="html">&lt;p&gt;At &lt;a class="reference external" href="http://djangocon.org"&gt;DjangoCon 2008&lt;/a&gt;, Cal Henderson made a joke that everyone in the Django community has built, is building, or intends to build a blogging engine. He asked the audience to put up their hands if they were building a blogging engine. I put up my hand. Although I probably could have claimed blog-writer status through my work proofreading &lt;a class="reference external" href="http://code.google.com/p/coltrane-blog"&gt;coltrane&lt;/a&gt; for &lt;a class="reference external" href="http://b-list.org/"&gt;James Bennett's&lt;/a&gt; book &lt;a class="reference external" href="http://www.apress.com/book/view/1590599969"&gt;Practical Django Projects&lt;/a&gt;, this site is the real reason.&lt;/p&gt;
&lt;p&gt;I've been meaning to set up a blog for a while. My old home page (finding it is left as an exercise to the reader) dates from my days in university, which means it is has been over a decade since it was written (by hand, with no dynamic content at all), and almost 5 years since I made any serious updates. Given that I volunteer a lot of my time working for a prominent web framework, this rates as a pretty bad case of the cobblers children having no shoes.&lt;/p&gt;
&lt;p&gt;That said, I'm honestly not expecting to blog that much. I find writing to be an agonizing process. I am acutely aware of the power that words have, and I am also aware of the fact that I am by no means an expert wordsmith. However, from time to time there are things that I need to get off my chest, and from time to time I'm in a position to provide a useful tutorial, so its useful to have a podium from which to bludgeon some words into submission. I'm also hoping that by giving me a forum in which to exercise my writing muscles, this blog might make the act of writing a little less painful.&lt;/p&gt;
&lt;p&gt;One point of interest regarding this blog: you may notice that there is no comment interface. This is deliberate. In the near future, I intend to blog to explain my reasons for this. In the meantime, if you feel the need to respond, write an entry in your own blog. If you don't have a blog, there are many &lt;a class="reference external" href="http://blogger.com/"&gt;freely&lt;/a&gt; &lt;a class="reference external" href="http://wordpress.com/"&gt;available&lt;/a&gt; &lt;a class="reference external" href="http://livejournal.com/"&gt;options&lt;/a&gt; - or you can do the Django thing and build your own.&lt;/p&gt;
</content></entry></feed>